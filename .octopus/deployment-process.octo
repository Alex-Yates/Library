steps "Notify #octopus-library on Slack" {
    condition = "Always"

    actions "Notify #octopus-library on Slack" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_RunOnServer = "true"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    $payload = @{
                        channel = $OctopusParameters['ssn_Channel']
                        username = $OctopusParameters['ssn_Username'];
                        icon_url = $OctopusParameters['ssn_IconUrl'];
                        link_names = "true";
                        attachments = @(
                            @{
                                mrkdwn_in = $('pretext', 'text');
                                pretext = $OctopusParameters['ssn_Title'];
                                text = $OctopusParameters['ssn_Message'];
                                color = $OctopusParameters['ssn_Color'];
                            }
                        )
                    }
                    
                    try {
                    	[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12
                        Invoke-Restmethod -Method POST -Body ($payload | ConvertTo-Json -Depth 4) -Uri $OctopusParameters['ssn_HookUrl']
                    } catch {
                        Write-Host "An error occurred while attempting to send Slack notification"
                        Write-Host $_.Exception
                        Write-Host $_
                        exit 0
                    }
                EOT
            Octopus_Action_Template_Version = "12"
            Octopus_Action_Template_Id = "ActionTemplates-404"
            ssn_IconUrl = "http://octopusdeploy.com/content/resources/favicon.png"
            ssn_Username = "Octopus Deploy"
            ssn_HookUrl = "#{SlackWebhook}"
            ssn_Channel = "#{SlackChannel}"
            ssn_Title = "Deployment started"
            ssn_Message = <<-EOT
                    Release `#{Octopus.Release.Number}` to *#{Octopus.Environment.Name}*
                    
                    #{if Octopus.Release.Notes}
                    *Release notes*
                    ```#{Octopus.Release.Notes}```
                    #{/if}
                EOT
            ssn_Color = "good"
        }
    }
}

steps "Clear Staging slot" {
    condition = "Always"
    start_trigger = "StartWithPrevious"

    actions "Clear Staging slot" {
        action_type = "Octopus.AzurePowerShell"

        properties {
            Octopus_Action_Azure_AccountId = "Octofront Service Principal"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    #Remove the staging slot if it exists
                    Remove-AzureRmWebAppSlot -ResourceGroupName #{AzureResourceGroupName} -Name #{AzureSiteName} -Slot Staging -Force
                    
                    #Create the staging slot
                    New-AzureRmWebAppSlot -ResourceGroupName #{AzureResourceGroupName} -Name #{AzureSiteName} -Slot Staging
                EOT
            Octopus_Action_Script_Syntax = "PowerShell"
        }
    }
}

steps "Deploy Octopus.Library " {

    actions "Deploy Octopus.Library " {
        action_type = "Octopus.AzureWebApp"

        packages {
            acquisition_location = "Server"
            feed_id_or_name = "Octopus Server (built-in)"
            package_id = "Octopus.Library"
        }

        properties {
            Octopus_Action_Package_FeedId = "Octopus Server (built-in)"
            Octopus_Action_Azure_UseChecksum = "False"
            Octopus_Action_Package_PackageId = "Octopus.Library"
            Octopus_Action_Azure_RemoveAdditionalFiles = "True"
            Octopus_Action_Azure_PreserveAppData = "True"
            Octopus_Action_Azure_DeploymentSlot = "#{AzureSlotName}"
            Octopus_Action_Package_DownloadOnTentacle = "False"
        }
    }

    properties {
        Octopus_Action_TargetRoles = "octopus-library"
    }
}

steps "HTTP - Invoke URL" {

    actions "HTTP - Invoke URL" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_Script_ScriptBody = <<-EOT
                    # Running outside octopus
                    param(
                        [string]$url,
                        [switch]$whatIf
                    ) 
                    
                    $ErrorActionPreference = "Stop" 
                    
                    function Get-Param($Name, [switch]$Required, $Default) {
                        $result = $null
                    
                        if ($OctopusParameters -ne $null) {
                            $result = $OctopusParameters[$Name]
                        }
                    
                        if ($result -eq $null) {
                            $variable = Get-Variable $Name -EA SilentlyContinue   
                            if ($variable -ne $null) {
                                $result = $variable.Value
                            }
                        }
                    
                        if ($result -eq $null -or $result -eq "") {
                            if ($Required) {
                                throw "Missing parameter value $Name"
                            } else {
                                $result = $Default
                            }
                        }
                    
                        return $result
                    }
                    
                    & {
                        param(
                            [string]$url
                        ) 
                    
                        Write-Host "Invoke Url: $url"
                    
                        try {
                        
                            Invoke-WebRequest -Uri $url -Method Get -UseBasicParsing
                    
                        } catch {
                            Write-Host "There was a problem invoking Url"    
                        }
                    
                     } `
                     (Get-Param 'url' -Required)
                EOT
            Octopus_Action_Template_Id = "ActionTemplates-102"
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_RunOnServer = "true"
            url = "#{LibrarySiteWithSlotUrl}"
            Octopus_Action_Template_Version = "2"
        }
    }
}

steps "Notify #octopus-library of manual intervention" {

    actions "Notify #octopus-library of manual intervention" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_RunOnServer = "true"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    $payload = @{
                        channel = $OctopusParameters['ssn_Channel']
                        username = $OctopusParameters['ssn_Username'];
                        icon_url = $OctopusParameters['ssn_IconUrl'];
                        link_names = "true";
                        attachments = @(
                            @{
                                mrkdwn_in = $('pretext', 'text');
                                pretext = $OctopusParameters['ssn_Title'];
                                text = $OctopusParameters['ssn_Message'];
                                color = $OctopusParameters['ssn_Color'];
                            }
                        )
                    }
                    
                    try {
                    	[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12
                        Invoke-Restmethod -Method POST -Body ($payload | ConvertTo-Json -Depth 4) -Uri $OctopusParameters['ssn_HookUrl']
                    } catch {
                        Write-Host "An error occurred while attempting to send Slack notification"
                        Write-Host $_.Exception
                        Write-Host $_
                        exit 0
                    }
                EOT
            Octopus_Action_Template_Version = "12"
            Octopus_Action_Template_Id = "ActionTemplates-404"
            ssn_IconUrl = "http://octopusdeploy.com/content/resources/favicon.png"
            ssn_Username = "Octopus Deploy"
            ssn_Color = "good"
            ssn_HookUrl = "#{SlackWebhook}"
            ssn_Channel = "#{SlackChannel}"
            ssn_Title = "Confirm changes on Staging slot"
            ssn_Message = <<-EOT
                    Confirm the changes in this release on https://library-prod-webapp-staging.azurewebsites.net/
                    
                    #{if Octopus.Release.Notes}
                    *Release notes*
                    
                    ```
                    #{Octopus.Release.Notes}
                    ```
                    #{/if}
                    
                    <#{Octopus.Web.BaseUrl}#{Octopus.Web.DeploymentLink}|Action manual intervention>
                EOT
        }
    }
}

steps "Confirm changes on Staging slot" {
    start_trigger = "StartWithPrevious"

    actions "Confirm changes on Staging slot" {
        action_type = "Octopus.Manual"

        properties {
            Octopus_Action_Manual_Instructions = <<-EOT
                    Confirm the changes in this release on [Staging](https://library-prod-webapp-staging.azurewebsites.net/)
                    
                    ### Release notes
                    
                    #{Octopus.Release.Notes}
                EOT
        }
    }
}

steps "Swap Staging slot to Production" {

    actions "Swap Staging slot to Production" {
        action_type = "Octopus.AzurePowerShell"

        properties {
            Octopus_Action_Azure_AccountId = "Octofront Service Principal"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_Script_ScriptBody = "Switch-AzureRmWebAppSlot -SourceSlotName Staging -DestinationSlotName Production -ResourceGroupName #{AzureResourceGroupName} -Name #{AzureSiteName}"
            Octopus_Action_Script_Syntax = "PowerShell"
        }
    }
}

steps "Reinstall Let's Encrypt extension" {

    actions "Reinstall Let's Encrypt extension" {
        action_type = "Octopus.AzureResourceGroup"
        is_disabled = true

        properties {
            Octopus_Action_Azure_ResourceGroupName = "#{AzSiteExt_ResourceGroupName}"
            Octopus_Action_Azure_TemplateSource = "Inline"
            Octopus_Action_Azure_ResourceGroupTemplateParameters = "{\"siteName\":{\"value\":\"#{AzSiteExt_SiteName}\"},\"extensionName\":{\"value\":\"#{AzSiteExt_ExtensionName}\"},\"appServicePlanName\":{\"value\":\"#{AzSiteExt_AppServicePlanName}\"}}"
            Octopus_Action_Azure_ResourceGroupDeploymentMode = "Incremental"
            Octopus_Action_Azure_ResourceGroupTemplate = <<-EOT
                    {
                        "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                        "contentVersion": "1.0.0.0",
                        "parameters": {        
                            "siteName": {
                                "type": "string",
                                "metadata": {
                                    "description": "Web site name"
                                }
                            },
                            "appServicePlanName": {
                                "type": "string",
                                "metadata": {
                                    "description": "App service plan name"
                                }
                            },
                            "extensionName": {
                                "type": "string",
                                "metadata": {
                                    "description": "Extension name"
                                }
                            }  
                        },
                        "variables": {  
                            "extensionApi": "2015-06-01"
                        },
                        "resources": [
                            {
                                "apiVersion": "[variables('extensionApi')]",
                                "name": "[parameters('siteName')]",
                                "type": "Microsoft.Web/sites",
                                "location": "[resourceGroup().location]",
                                "dependsOn": [],
                                "properties": {
                                    "name": "[parameters('siteName')]",
                                    "serverFarmId": "[parameters('appServicePlanName')]"
                                },
                                "resources": [
                                    {
                                        "apiVersion": "[variables('extensionApi')]",
                                        "name": "[parameters('extensionName')]",
                                        "type": "siteextensions",
                                        "dependsOn": [
                                            "[resourceId('Microsoft.Web/Sites', parameters('siteName'))]"
                                        ],
                                        "properties": {}
                                    }
                                ]
                            }
                        ]
                    }
                EOT
            Octopus_Action_Azure_AccountId = "#{AzSiteExt_AzureAccountId}"
            Octopus_Action_Template_Version = "12"
            AzSiteExt_ResourceGroupName = "#{AzureResourceGroupName}"
            AzSiteExt_SiteName = "#{AzureSiteName}"
            Octopus_Action_Template_Id = "ActionTemplates-401"
            AzSiteExt_ExtensionName = "letsencrypt"
            AzSiteExt_AppServicePlanName = "#{AzureAppServicePlanName}"
            AzSiteExt_AzureAccountId = "#{AzureAccountId}"
        }
    }
}

steps "HTTP - Invoke URL - Production" {
    start_trigger = "StartWithPrevious"

    actions "HTTP - Invoke URL - Production" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_Script_ScriptBody = <<-EOT
                    # Running outside octopus
                    param(
                        [string]$url,
                        [switch]$whatIf
                    ) 
                    
                    $ErrorActionPreference = "Stop" 
                    
                    function Get-Param($Name, [switch]$Required, $Default) {
                        $result = $null
                    
                        if ($OctopusParameters -ne $null) {
                            $result = $OctopusParameters[$Name]
                        }
                    
                        if ($result -eq $null) {
                            $variable = Get-Variable $Name -EA SilentlyContinue   
                            if ($variable -ne $null) {
                                $result = $variable.Value
                            }
                        }
                    
                        if ($result -eq $null -or $result -eq "") {
                            if ($Required) {
                                throw "Missing parameter value $Name"
                            } else {
                                $result = $Default
                            }
                        }
                    
                        return $result
                    }
                    
                    & {
                        param(
                            [string]$url
                        ) 
                    
                        Write-Host "Invoke Url: $url"
                    
                        try {
                        
                            Invoke-WebRequest -Uri $url -Method Get -UseBasicParsing
                    
                        } catch {
                            Write-Host "There was a problem invoking Url"    
                        }
                    
                     } `
                     (Get-Param 'url' -Required)
                EOT
            Octopus_Action_Template_Id = "ActionTemplates-102"
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_RunOnServer = "true"
            url = "#{LibrarySiteUrl}"
            Octopus_Action_Template_Version = "2"
        }
    }
}

steps "GitHub - Create Release" {

    actions "GitHub - Create Release" {
        action_type = "Octopus.Script"

        properties {
            gitHubApiKey = "#{GitHubApiKey}"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    
                    $formattedVersionNumber = [string]::Format("v{0}", $versionNumber)
                    $isDraft = [bool]::Parse($draft)
                    $isPrerelease = [bool]::Parse($preRelease)
                    
                    $releaseData = @{
                        tag_name = $formattedVersionNumber;
                        target_commitish = $commitId;
                        name = $formattedVersionNumber;
                        body = $releaseNotes;
                        draft = $isDraft;
                        prerelease = $isPrerelease;
                    }
                    
                    $releaseParams = @{
                        Uri = "https://api.github.com/repos/$gitHubUsername/$gitHubRepository/releases";
                        Method = 'POST';
                        Headers = @{
                            Authorization = 'Basic ' + [Convert]::ToBase64String(
                                [Text.Encoding]::ASCII.GetBytes($gitHubApiKey + ":x-oauth-basic")
                            );
                        }
                        ContentType = 'application/json';
                        Body = (ConvertTo-Json $releaseData -Compress)
                    }
                    
                    Write-Host "Creating release $formattedVersionNumber for $commitId."
                    $result = Invoke-RestMethod @releaseParams
                    
                    Write-Host "Release successfully created."
                    $result
                EOT
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_Template_Version = "4"
            Octopus_Action_Template_Id = "ActionTemplates-61"
            versionNumber = "#{Octopus.Release.Number}"
            commitId = "master"
            releaseNotes = "#{Octopus.Release.Notes}"
            draft = "false"
            preRelease = "false"
            gitHubUsername = "#{GitHubOwner}"
            gitHubRepository = "#{GitHubRepository}"
            Octopus_Action_RunOnServer = "true"
        }
    }
}

steps "GitHub - Clean vNext Milestone" {
    start_trigger = "StartWithPrevious"

    actions "GitHub - Clean vNext Milestone" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_RunOnServer = "true"
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                    
                    $githubUri = "https://api.github.com"
                    $githubHeaders = @{
                            Authorization = 'Basic ' + [Convert]::ToBase64String(
                                [Text.Encoding]::ASCII.GetBytes($GitHubApiKey + ":x-oauth-basic")
                            );
                    }
                    $issuesUri = "$githubUri/repos/$GitHubOwner/$GitHubRepository/issues"
                    
                    
                    $issueRequest = @{
                        "state" = "closed";
                        "milestone" = "*"
                    }
                    $qs = [String]::Join("&", ($issueRequest.GetEnumerator() | % { "$($_.Name)=$($_.Value)" }))
                    $closedIssuesRequest = @{
                        Uri = "$issuesUri`?$qs";
                        Method = 'GET';
                        Headers = $githubHeaders;
                        ContentType = 'application/json';
                    }
                    
                    $closedIssues = Invoke-RestMethod @closedIssuesRequest
                    $closedIssues | % {
                        $issueNumber = $_.number
                        Write-Host "Removing issue $issueNumber from milestone..."
                        $issueUpdate = @{
                            "milestone" = $null
                        }
                        $issueUpdateRequest = @{
                            Uri = "$issuesUri/$issueNumber";
                            Method = 'PATCH';
                            Headers = $githubHeaders;
                            ContentType = 'application/json';
                            Body = (ConvertTo-Json $issueUpdate -Compress)
                        }
                    
                        try
                        {
                            $response = Invoke-RestMethod @issueUpdateRequest
                            Write-Host "Issue $issueNumber has been removed from milestone!"
                        } catch {
                            Write-Error $_.Exception.Message
                            break
                        }
                    }
                    
                EOT
        }
    }
}

steps "Notify #octopus-library of deployment result" {
    condition = "Always"

    actions "Notify #octopus-library of deployment result" {
        action_type = "Octopus.Script"

        properties {
            Octopus_Action_Script_Syntax = "PowerShell"
            Octopus_Action_Script_ScriptSource = "Inline"
            Octopus_Action_RunOnServer = "true"
            Octopus_Action_Script_ScriptBody = <<-EOT
                    $payload = @{
                        channel = $OctopusParameters['ssn_Channel']
                        username = $OctopusParameters['ssn_Username'];
                        icon_url = $OctopusParameters['ssn_IconUrl'];
                        link_names = "true";
                        attachments = @(
                            @{
                                mrkdwn_in = $('pretext', 'text');
                                pretext = $OctopusParameters['ssn_Title'];
                                text = $OctopusParameters['ssn_Message'];
                                color = $OctopusParameters['ssn_Color'];
                            }
                        )
                    }
                    
                    try {
                    	[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12
                        Invoke-Restmethod -Method POST -Body ($payload | ConvertTo-Json -Depth 4) -Uri $OctopusParameters['ssn_HookUrl']
                    } catch {
                        Write-Host "An error occurred while attempting to send Slack notification"
                        Write-Host $_.Exception
                        Write-Host $_
                        exit 0
                    }
                EOT
            Octopus_Action_Template_Version = "12"
            Octopus_Action_Template_Id = "ActionTemplates-404"
            ssn_IconUrl = "http://octopusdeploy.com/content/resources/favicon.png"
            ssn_Username = "Octopus Deploy"
            ssn_Color = "#{if Octopus.Deployment.Error}danger#{/if}#{unless Octopus.Deployment.Error}good#{/unless}"
            ssn_HookUrl = "#{SlackWebhook}"
            ssn_Channel = "#{SlackChannel}"
            ssn_Title = "Deployment *#{if Octopus.Deployment.Error}failed#{/if}#{unless Octopus.Deployment.Error}succeeded#{/unless}*"
            ssn_Message = "Release `#{Octopus.Release.Number}` to *#{Octopus.Environment.Name}*"
        }
    }
}