{
    "Id": "0dac2fe6-91d5-4c05-bdfb-1b97adf1e12e",
    "Name": "Deploy Child Octopus Deploy Project",
    "Description": "This step will find the latest release in a source environment matching your criteria and deploy it.  \n\nUse cases:\n- As a user, I want to create a single parent release `2020.2.1`.  When I promote the parent release I want the latest child releases matching `2020.2.1.*` to be promoted to the next environment.\n- As a user, I want the latest release in the dev environment to be promoted to the test environment.  Not the most recently created release, the most recent release deployed that environment.\n- As a user, when we are finished with our QA process, we want to automatically push the latest releases from QA to Staging without having to manually promote each release.\n- As a user, I'd like to set up a nightly build to promote the latest releases from Dev to QA\n- As a user, I'd like to be able to deploy a suite of applications to a tenant.  If the tenant isn't assigned to the project then skip over.\n- As a user, I'd like to see what releases would go to production and approve those releases without having to manually verify and approve each one.\n\nThis step template also allows you to skip deployments to the destination environment if it has already been deployed.",
    "ActionType": "Octopus.Script",
    "Version": 2,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'\n[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12\n\n$octopusApiKey = $OctopusParameters[\"ChildProject.Api.Key\"]\n$projectName = $OctopusParameters[\"ChildProject.Project.Name\"]\n$ChannelName = $OctopusParameters[\"ChildProject.Channel.Name\"]\n$releaseNumber = $OctopusParameters[\"ChildProject.Release.Number\"]\n$environmentName = $OctopusParameters[\"ChildProject.Destination.EnvironmentName\"]\n$sourceEnvironmentName = $OctopusParameters[\"ChildProject.SourceEnvironment.Name\"]\n$formValues = $OctopusParameters[\"ChildProject.Prompted.Variables\"]\n$spaceId = $OctopusParameters[\"Octopus.Space.Id\"]\n$deploymentTenantId = $OctopusParameters[\"Octopus.Deployment.Tenant.Id\"]\n$allowRedeployToTargetEnvironmentValue = $OctopusParameters[\"ChildProject.ForceRedeployment.Value\"]\n$whatIfValue = $OctopusParameters[\"ChildProject.WhatIf.Value\"]\n$waitForFinishValue = $OctopusParameters[\"ChildProject.WaitForFinish.Value\"]\n$deploymentCancelInSeconds = $OctopusParameters[\"ChildProject.CancelDeployment.Seconds\"]\n\n$whatIf = $whatIfValue -eq \"Yes\"\n$allowRedeployToTargetEnvironment = $allowRedeployToTargetEnvironmentValue -eq \"Yes\"\n$waitForFinish = $waitForFinishValue -eq \"Yes\"\n\n$DefaultUrl = $OctopusParameters['Octopus.Web.BaseUrl']\n# Use \"Octopus.Web.ServerUri\" if it is available\nif ($OctopusParameters['Octopus.Web.ServerUri']) {\n  $DefaultUrl = $OctopusParameters['Octopus.Web.ServerUri']\n}\n\nfunction Write-OctopusVerbose\n{\n    param($message)\n    \n    Write-Verbose $message  \n}\n\nfunction Write-OctopusInformation\n{\n    param($message)\n    \n    Write-Host $message  \n}\n\nfunction Write-OctopusSuccess\n{\n    param($message)\n\n    Write-Highlight $message \n}\n\nfunction Write-OctopusWarning\n{\n    param($message)\n\n    Write-Warning \"$message\" \n}\n\nfunction Write-OctopusCritical\n{\n    param ($message)\n\n    Write-Error \"$message\" \n}\n\nfunction Invoke-OctopusApi\n{\n    param\n    (\n        $octopusUrl,\n        $endPoint,\n        $spaceId,\n        $apiKey,\n        $method,\n        $item     \n    )\n\n    if ([string]::IsNullOrWhiteSpace($SpaceId))\n    {\n        $url = \"$OctopusUrl/api/$EndPoint\"\n    }\n    else\n    {\n        $url = \"$OctopusUrl/api/$spaceId/$EndPoint\"    \n    }  \n\n    try\n    {\n        if ($null -eq $item)\n        {\n            Write-OctopusVerbose \"No data to post or put, calling bog standard invoke-restmethod for $url\"\n            return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -ContentType 'application/json; charset=utf-8'\n        }\n\n        $body = $item | ConvertTo-Json -Depth 10\n        Write-OctopusVerbose $body\n\n        Write-OctopusInformation \"Invoking $method $url\"\n        return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -Body $body -ContentType 'application/json; charset=utf-8'\n    }\n    catch\n    {\n        if ($null -ne $_.Exception.Response)\n        {\n            if ($_.Exception.Response.StatusCode -eq 401)\n            {\n                Write-OctopusCritical \"Unauthorized error returned from $url, please verify API key and try again\"\n            }\n            else\n            {\n                $result = $_.Exception.Response.GetResponseStream()\n                $reader = New-Object System.IO.StreamReader($result)\n                $reader.BaseStream.Position = 0\n                $reader.DiscardBufferedData()\n                $responseBody = $reader.ReadToEnd();\n                Write-OctopusVerbose -Message \"Error calling $url $($_.Exception.Message) StatusCode: $($_.Exception.Response.StatusCode.value__ ) StatusDescription: $($_.Exception.Response.StatusDescription) $responseBody\"\n            }            \n        }\n        else\n        {\n            Write-OctopusVerbose $_.Exception\n        }\n    }\n\n    Throw \"There was an error calling the Octopus API please check the log for more details\"\n}\n\nfunction Test-EmptyItemList\n{\n    param(\n        $itemList,\n        $itemName\n    )\n\n    if ($itemList.Items.Count -eq 0)\n    {\n        Write-OctopusCritical \"Unable to find $itemName.  Exiting with an exit code of 1.\"\n        Exit 1\n    }\n}\n\nfunction Get-OctopusProject\n{\n    param (\n        $projectName,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find project with name of $projectName\"\n    $projectList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"projects?partialName=$([uri]::EscapeDataString($projectName))&skip=0&take=100\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    Test-EmptyItemList -itemList $projectList -itemName $projectName\n    $project = $projectList.Items | Where-Object { $_.Name -eq $projectName }\n    Write-OctopusInformation \"Successfully found $projectName with id of $($project.Id)\"\n\n    return $project\n}\n\nfunction Get-OctopusEnvironment\n{\n    param (\n        $environmentName,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ([string]::IsNullOrWhiteSpace($environmentName))\n    {\n        return $null\n    }\n\n    Write-OctopusInformation \"Attempting to find environment with name of $environmentName\"\n    $targetEnvironmentList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"environments?partialName=$([uri]::EscapeDataString($environmentName))&skip=0&take=100\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    Test-EmptyItemList -itemList $targetEnvironmentList -itemName $environmentName\n    $targetEnvironment = $targetEnvironmentList.Items | Where-Object { $_.Name -eq $environmentName }\n    Write-OctopusInformation \"Successfully found $environmentName with id of $($targetEnvironment.Id)\"\n\n    return $targetEnvironment\n}\n\nfunction Get-OctopusTenant\n{\n    param (\n        $deploymentTenantId,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ([string]::IsNullOrWhiteSpace($deploymentTenantId))\n    {\n        return $null\n    }\n    \n    $tenantToDeploy = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"tenants/$deploymentTenantId\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    if ($null -eq $tenantToDeploy)\n    {\n        Write-OctopusCritical \"Unable to find the specified tenant $deploymentTenantId\"\n        Exit 1\n    }\n    else\n    {\n        Write-OctopusInformation \"Found tenant $($tenantToDeploy.Name)\"\n    }\n    \n    return $tenantToDeploy\n}\n\nfunction Get-OctopusChannel\n{\n    param (\n        $channelName,\n        $project,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the channel information for project $projectName matching the channel name $channelName\"\n    $channelList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"projects/$($project.Id)/channels?skip=0&take=1000\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    $channelToUse = $null\n    foreach ($channel in $channelList.Items)\n    {\n        if ([string]::IsNullOrWhiteSpace($channelName) -eq $true -and $channel.IsDefault -eq $true)\n        {\n            Write-OctopusVerbose \"The channel name specified is null or empty and the current channel $($channel.Name) is the default, using that\"\n            $channelToUse = $channel\n            break\n        }\n\n        if ([string]::IsNullOrWhiteSpace($channelName) -eq $false -and $channel.Name.Trim().ToLowerInvariant() -eq $ChannelName.Trim().ToLowerInvariant())\n        {\n            Write-OctopusVerbose \"The channel name specified $channelName matches the the current channel $($channel.Name) using that\"\n            $channelToUse = $channel\n            break\n        }\n    }\n\n    if ($null -eq $channelToUse)\n    {\n        Write-OctopusCritical \"Unable to find a channel to use.  Exiting with an exit code of 1.\"\n        exit 1\n    }\n\n    return $channelToUse\n}\n\nfunction Get-OctopusLifecycle\n{\n    param (\n        $channel,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the lifecycle information $($channel.Name)\"\n    if ($null -eq $channel.LifecycleId)\n    {\n        $lifecycleName = \"Default Lifecycle\"\n        $lifecycleList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles?partialName=$([uri]::EscapeDataString($lifecycleName))&skip=0&take=1\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $lifecycle = $lifecycleList.Items[0]\n    }\n    else\n    {\n        $lifecycle = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($channel.LifecycleId)\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    }\n\n    Write-Host \"Successfully found the lifecycle $($lifecycle.Name) to use for this channel.\"\n\n    return $lifecycle\n}\n\nfunction Get-LifecyclePhases\n{\n    param (\n        $lifecycle,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the phase in the lifecycle $($lifecycle.Name) with the environment $environmentName to find the previous phase.\"\n    if ($lifecycle.Phases.Count -eq 0)\n    {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has no set phases, calling the preview endpoint.\"\n        $lifecyclePreview = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($lifecycle.Id)/preview\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $phases = $lifecyclePreview.Phases\n    }\n    else\n    {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has set phases, using those.\"\n        $phases = $lifecycle.Phases    \n    }\n\n    Write-OctopusInformation \"Found $($phases.Length) phases in this lifecycle.\"\n    return $phases\n}\n\nfunction Get-PreviousPhase\n{\n    param (\n        $phaseList,\n        $targetEnvironment,\n        $sourceEnvironment\n    )\n\n    for ($i = 0; $i -lt $phaseList.Length; $i++)\n    {\n        Write-Host \"Checking to see if $($phaseList[$i].Name) contains the target environment id $($targetEnvironment.Id)\"\n\n        if ($phaseList[$i].AutomaticDeploymentTargets -contains $targetEnvironment.Id -or $phaseList[$i].OptionalDeploymentTargets -contains $targetEnvironment.Id)    \n        {\n            Write-OctopusVerbose \"The phase $($phaseList[$i].Name) has the environment $($targetEnvironment.Name).\"\n            \n            if ($i -eq 0)\n            {\n            \tWrite-OctopusInformation \"This is the first phase in the lifecycle, there is no previous phase\"\n                return $null\n            }\n            \n            $previousPhase = $phaseList[($i - 1)]\n            Write-OctopusInformation \"The previous phase is $($previousPhase.Name).\"\n\n            if ($null -eq $sourceEnvironment)\n            {\n                return $previousPhase                \n            }\n\n            Write-OctopusVerbose \"A source environment was specified, verifying this phase has the source environment\"\n            if ($previousPhase.AutomaticDeploymentTargets -contains $sourceEnvironment.Id -or $previousPhase.OptionalDeploymentTargets -contains $sourceEnvironment.Id)\n            {\n                Write-OctopusVerbose \"The previous phase has the source environment.\"\n                return $previousPhase\n            }\n        }\n    } \n    \n    Write-OctopusCritical \"Unable to find the previous phase in this lifecycle.  Exiting with exit code of 1\"\n    Exit 1\n}\n\nfunction Get-DestinationPhase\n{\n    param (\n        $phaseList,\n        $targetEnvironment\n    )\n\n    for ($i = 0; $i -lt $phaseList.Length; $i++)\n    {\n        Write-Host \"Checking to see if $($phaseList[$i].Name) contains the target environment id $($targetEnvironment.Id)\"\n\n        if ($phaseList[$i].AutomaticDeploymentTargets -contains $targetEnvironment.Id -or $phaseList[$i].OptionalDeploymentTargets -contains $targetEnvironment.Id)    \n        {\n            Write-OctopusVerbose \"The phase $($phaseList[$i].Name) has the environment $($targetEnvironment.Name).\"\n\n            return $phaseList[$i]            \n        }\n    } \n    \n    Write-OctopusCritical \"Unable to find the previous phase in this lifecycle.  Exiting with exit code of 1\"\n    Exit 1\n}\n\nfunction Get-ReleaseCanBePromotedToTargetEnvironment\n{\n    param (\n        $release,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $targetEnvironment,\n        $deploymentTenantId\n    )\n\n    Write-OctopusInformation \"Pulling the deployment template information for release $($release.Version)\"\n    $releaseDeploymentTemplate = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"releases/$($release.Id)/deployments/template\" -spaceId $spaceId -method GET -apiKey $octopusApiKey\n\n    $releaseCanBeDeployedToDestination = $false    \n    Write-OctopusInformation \"Looping through deployment template list for $($release.Version) to see if it can be deployed to $($targetEnvironment.Name).\"\n    foreach ($promoteToEnvironment in $releaseDeploymentTemplate.PromoteTo)\n    {\n        if ($promoteToEnvironment.Id -eq $targetEnvironment.Id)\n        {\n            Write-OctopusInformation \"The environment $($targetEnvironment.Name) was found in the list of environments.\"\n            $releaseCanBeDeployedToDestination = $true\n            break\n        }\n    }    \n\n    if ([string]::IsNullOrWhiteSpace($deploymentTenantId) -eq $true -or $releaseDeploymentTemplate.TenantPromotions.Length -le 0)\n    {\n        return $releaseCanBeDeployedToDestination\n    }\n\n    $releaseCanBeDeployedToDestination = $false\n    Write-OctopusInformation \"The tenant id was supplied, looping through the tenant templates to see if it can be deployed to $($targetEnvironment.Name).\"\n    foreach ($tenantPromotion in $releaseDeploymentTemplate.TenantPromotions)\n    {\n        if ($tenantPromotion.Id -ne $deploymentTenantId)\n        {\n            Write-OctopusVerbose \"The tenant ids don't match, moving onto the next one\"\n            continue\n        }\n\n        foreach ($promoteToEnvironment in $tenantPromotion.PromoteTo)\n        {\n            if ($promoteToEnvironment.Id -ne $targetEnvironment.Id)\n            {\n                Write-OctopusVerbose \"The environments don't match, moving onto the next one.\"\n                continue\n            }\n\n            Write-OctopusInformation \"The environment $($targetEnvironment.Name) was found in the list of environments tenant $deploymentTenantId can promote to\"\n            $releaseCanBeDeployedToDestination = $true\n        }\n    }\n\n    return $releaseCanBeDeployedToDestination\n}\n\nfunction Get-ValuesForPromptedVariables\n{\n    param (\n        $releaseToPromote,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $targetEnvironment,\n        $deploymentTenantId,\n        $formValues\n    )\n\n    $deploymentFormValues = @{}\n    if ([string]::IsNullOrWhiteSpace($formValues) -eq $true)\n    {\n        return $deploymentFormValues\n    }\n\n    $deploymentPreviewUrl = Invoke-OctopusApi -endPoint \"releases/$($releaseToPromote.Release.Id)/previews/\" -octopusUrl $DefaultUrl -apiKey $octopusApiKey -method \"GET\" -spaceId $spaceId\n    Write-OctopusVerbose \"Prompted variables were supplied, hitting the preview endpoint $deploymentPreviewUrl\"\n    $deploymentPreview = Invoke-RestMethod $deploymentPreviewUrl -Headers $header    \n    \n    $promptedValueList = @(($formValues -Split \"`n\").Trim())\n    Write-OctopusVerbose $promptedValueList.Length\n    \n    foreach($element in $deploymentPreview.Form.Elements)\n    {\n        $nameToSearchFor = $element.Control.Name\n        $uniqueName = $element.Name\n        $isRequired = $element.Control.Required\n        \n        $promptedVariablefound = $false\n        \n        Write-OctopusVerbose \"Looking for the prompted variable value for $nameToSearchFor\"\n        foreach ($promptedValue in $promptedValueList)\n        {\n            $splitValue = $promptedValue -Split \"::\"\n            Write-OctopusVerbose \"Comparing $nameToSearchFor with provided prompted variable $($promptedValue[0])\"\n            if ($splitValue.Length -gt 1)\n            {\n                if ($nameToSearchFor -eq $splitValue[0])\n                {\n                    Write-OctopusVerbose \"Found the prompted variable value $nameToSearchFor\"\n                    $deploymentFormValues[$uniqueName] = $splitValue[1]\n                    $promptedVariableFound = $true\n                    break\n                }\n            }\n        }\n        \n        if ($promptedVariableFound -eq $false -and $isRequired -eq $true)\n        {\n            Write-OctopusCritical \"Unable to find a value for the required prompted variable $nameToSearchFor, exiting\"\n            Exit 1\n        }\n    }\n}\n\nfunction Test-ProjectTenantSettings\n{\n    param (\n        $tenantToDeploy,\n        $project,\n        $targetEnvironment\n    )\n\n\tWrite-OctopusVerbose \"About to check if $tenantToDeploy is not null and tenant deploy mode on the project $($project.TenantedDeploymentMode) <> Untenanted\"\n    if ($null -ne $tenantToDeploy -and $project.TenantedDeploymentMode -ne \"Untenanted\")\n    {\n    \tWrite-OctopusInformation \"Found the tenant $($tenantToDeploy.Name) checking to see if $($project.Name) is assigned to it.\"\n        \n        Write-OctopusVerbose \"Checking to see if $($tenantToDeploy.ProjectEnvironments) has $($project.Id) as a property.\"\n        if ($null -eq (Get-Member -InputObject $tenantToDeploy.ProjectEnvironments -Name $project.Id -MemberType Properties))\n        {\n            Write-OctopusSuccess \"The tenant $($tenantToDeploy.Name) is not assigned to $($project.Name).  Exiting.\"\n            Exit 0\n        }\n\n\t\tWrite-OctopusInformation \"The tenant $($tenantToDeploy.Name) is assigned to $($project.Name).  Now checking to see if it can be deployed to the target environment.\"\n        $tenantProjectId = $project.Id\n        \n        Write-OctopusVerbose \"Checking to see if $($tenantToDeploy.ProjectEnvironments.$tenantProjectId) has $($targetEnvironment.Id)\"\n        \n        if ($tenantToDeploy.ProjectEnvironments.$tenantProjectId -notcontains $targetEnvironment.Id)\n        {\n            Write-OctopusSuccess \"The tenant $($tenantToDeploy.Name) is assigned to $($project.Name), but not to the environment $($targetEnvironment.Name).  Exiting.\"\n            Exit 0\n        }\n    }\n}\n\nfunction Get-ReleasesForChannel\n{\n    param (\n        $channel,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $releaseNumber    \n    )\n\n    if ([string]::IsNullOrWhiteSpace($releaseNumber) -eq $true)\n    {\n    \tWrite-OctopusInformation \"The release number was not set, pulling back the most recent 100 releases from the channel $($channel.Name) to find the release to deploy.\"\n        return Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"channels/$($channel.Id)/releases?skip=0&take=100\" -method \"Get\" -apiKey $octopusApiKey -spaceId $spaceId\n    }\n\n\tWrite-OctopusInformation \"Pulling back all the releases that match $releaseNumber in the channel $($channel.Name)\"\n\t$releaseNumberToUse = $releaseNumber\n\tif ($releaseNumberToUse.EndsWith('*') -eq $true)\n    {\n    \t$releaseNumberToUse = $releaseNumberToUse.Replace(\"*\", \"\")\n    }\n    \n    return Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"channels/$($channel.Id)/releases?searchByVersion=$releaseNumberToUse&skip=0&take=1000\" -method \"Get\" -apiKey $octopusApiKey -spaceId $spaceId\n}\n\nfunction Get-ReleaseToPromote\n{\n\tparam (\n    \t$channel,\n        $releaseNumber,\n        $environmentName,\n        $targetPhase,\n        $previousPhase,\n        $defaultUrl,\n        $spaceid,\n        $octopusApiKey        \n    )\n    \n    $releaseList = Get-ReleasesForChannel -spaceId $spaceId -defaultUrl $DefaultUrl -octopusApiKey $octopusApiKey -channel $channel -releaseNumber $releaseNumber\n    $lastDeploymentTime = (Get-Date).AddYears(-50)\n        \n    $releaseToPromote = @{\n    \tRelease = $null;\n    \tReleaseAlreadyDeployedToTargetEnvironment = @()    \n    }\n       \n    foreach ($release in $releaseList.Items)\n    {\n        if ($null -eq $previousPhase)\n        {\n            Write-OctopusInformation \"Using the most recent release created because we are currently in the first phase of the lifecycle.\"\n            $releaseToPromote.Release = $release        \n        }\n        else\n        {\n            $releaseCanBeDeployedToDestination = Get-ReleaseCanBePromotedToTargetEnvironment -defaultUrl $DefaultUrl -release $release -spaceId $spaceId -octopusApiKey $octopusApiKey -targetEnvironment $targetEnvironment -deploymentTenantId $deploymentTenantId\n\n            if ($releaseCanBeDeployedToDestination -eq $false)\n            {\n                Write-OctopusInformation \"The release $($release.Version) cannot be deployed to $environmentName because it doesn't statisfy the lifecycle requirements, moving onto the next release.\"\n                continue\n            }  \n        }\n\n        Write-OctopusInformation \"Pulling progression information for release $($release.Version)\"\n        $releaseProgressionList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"releases/$($release.Id)/progression\" -spaceId $spaceId -method \"GET\" -apiKey $octopusApiKey\n\n        $releaseDeploymentTime = $null\n        foreach ($phase in $releaseProgressionList.Phases)\n        {\n            if ($phase.Name.ToLowerInvariant().Trim() -eq $targetPhase.Name.ToLowerInvariant().Trim() -and $phase.Progress -eq \"Complete\")        \n            {            \n                foreach ($deployment in $phase.Deployments)          \n                {\n                    if ($deployment.Deployment.EnvironmentId -eq $targetEnvironment.Id -and $deployment.Deployment.FailureEncountered -eq $false)\n                    {\n                        Write-OctopusVerbose \"This release has already been deployed to the target environment\"  \n                        $releaseToPromote.ReleaseAlreadyDeployedToTargetEnvironment += $release.Id\n                    }\n                }                \n            }\n            \n            if ($null -eq $previousPhase)\n            {\n            \tbreak\n            }\n\n            if ($phase.Name.ToLowerInvariant().Trim() -eq $previousPhase.Name.ToLowerInvariant().Trim() -and $null -ne $phase.Deployments.Count -gt 0 -and $phase.Progress -eq \"Complete\")\n            {\n                Write-OctopusVerbose \"The phase $($phase.Name) matches the previous phase name.  Checking to see the last deployment time.\"\n                if ([string]::IsNullOrWhiteSpace($sourceEnvironment) -eq $true)\n                {\n                    $completedTime = [datetime]::Parse($phase.Deployments[0].Task.CompletedTime)\n                    if ($completedTime -gt $lastDeploymentTime)\n                    {                \n                        $releaseDeploymentTime = $completedTime\n                        Write-OctopusVerbose \"The last time $($phase.Name) was deployed to was $releaseDeploymentTime\"    \n                    }\n                }\n                else\n                {\n                    foreach ($deployment in $phase.Deployments)    \n                    {\n                        if ($deployment.Deployment.EnvironmentId -eq $sourceEnvironment.Id -and $deployment.Deployment.FailureEncountered -eq $false)\n                        {\n                            $completedTime = [datetime]::Parse($deployment.Task.CompletedTime)\n                            if ($completedTime -gt $lastDeploymentTime)\n                            {                \n                                $releaseDeploymentTime = $completedTime\n                                Write-OctopusVerbose \"The last time $($phase.Name) was deployed to was $releaseDeploymentTime\"    \n                            }\n                        }\n                    }\n                }            \n            }\n        }  \n\n        if ($null -eq $previousPhase)\n        {\n            break\n        }\n\n        if ($null -ne $releaseDeploymentTime)\n        {\n            Write-OctopusInformation \"$($release.Version)'s next phase is to $environmentName.  So far it is the one with the most recent deployment to $($previousPhase.Name).\"\n            $releaseToPromote.Release = $release\n            $lastDeploymentTime = $releaseDeploymentTime\n        }\n    }\n    \n    return $releaseToPromote\n}\n\nfunction Create-NewOctopusDeployment\n{\n\tparam (\n    \t$releaseToPromote,\n        $targetEnvironment,\n        $createdRelease,\n        $project,\n        $waitForFinish,\n        $deploymentCancelInSeconds,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId\n    )\n    \n    Write-OctopusSuccess \"Deploying $($releaseToPromote.Release.Version) to $($targetEnvironment.Name)\"\n\n    $createdDeployment = Invoke-OctopusApi -method \"POST\" -endPoint \"deployments\" -octopusUrl $DefaultUrl -apiKey $octopusApiKey -spaceId $spaceId -item $createdRelease\n    Write-OctopusInformation \"The task id for the new deployment is $($createdDeployment.TaskId)\"\n\n    Write-OctopusSuccess \"Deployment was successfully invoked, you can access the deployment [here]($defaultUrl/app#/$spaceId/projects/$($project.Slug)/deployments/releases/$($releaseToPromote.Release.Version)/deployments/$($CreatedDeployment.Id)?activeTab=taskSummary)\"\n    if ($waitForFinish -eq $true)\n    {\n        Write-OctopusSuccess \"Waiting until deployment has finished\"\n        $startTime = Get-Date\n        $currentTime = Get-Date\n        $dateDifference = $currentTime - $startTime\n\n        $numberOfWaits = 0    \n\n        While ($dateDifference.TotalSeconds -lt $deploymentCancelInSeconds)\n        {\n            Write-Host \"Waiting 5 seconds to check status\"\n            Start-Sleep -Seconds 5\n            $taskStatusResponse = Invoke-OctopusApi -octopusUrl $DefaultUrl -spaceId $spaceId -apiKey $octopusApiKey -endPoint \"tasks/$($createdDeployment.TaskId)\" -method \"GET\"        \n            $taskStatusResponseState = $taskStatusResponse.State\n\n            if ($taskStatusResponseState -eq \"Success\")\n            {\n                Write-OctopusSuccess \"The task has finished with a status of Success\"\n                exit 0            \n            }\n            elseif($taskStatusResponseState -eq \"Failed\" -or $taskStatusResponseState -eq \"Canceled\")\n            {\n                Write-OctopusSuccess \"The task has finished with a status of $taskStatusResponseState status, stopping the deployment\"\n                exit 1            \n            }\n\n            $numberOfWaits += 1\n            if ($numberOfWaits -ge 10)\n            {\n                Write-OctopusSuccess \"The task state is currently $taskStatusResponseState\"\n                $numberOfWaits = 0\n            }\n            else\n            {\n                Write-OctopusInformation \"The task state is currently $taskStatusResponseState\"\n            }  \n\n            $startTime = $taskStatusResponse.StartTime\n            if ($null -eq $startTime -or [string]::IsNullOrWhiteSpace($startTime) -eq $true)\n            {        \n                Write-Host \"The task is still queued, let's wait a bit longer\"\n                $startTime = Get-Date\n            }\n            $startTime = [DateTime]$startTime\n\n            $currentTime = Get-Date\n            $dateDifference = $currentTime - $startTime        \n        }\n\n        Write-OctopusCritical \"The cancel timeout has been reached, cancelling the deployment\"\n        Invoke-OctopusApi -octopusUrl $DefaultUrl -apiKey $octopusApiKey -spaceId $spaceId -method \"POST\" -endPoint \"tasks/$($createdDeployment.TaskId)/cancel\"    \n        Write-OctopusInformation \"Exiting with an error code of 1 because we reached the timeout\"\n        exit 1\n    }\n}\n\nWrite-OctopusInformation \"Project Name: $projectName\"\nWrite-OctopusInformation \"Channel Name: $ChannelName\"\nWrite-OctopusInformation \"Release Number: $releaseNumber\"\nWrite-OctopusInformation \"Destination Environment Name: $environmentName\"\nWrite-OctopusInformation \"Source Environment Name: $sourceEnvironmentName\"\nWrite-OctopusInformation \"SpaceId: $spaceId\"\nWrite-OctopusInformation \"deploymentTenantId: $deploymentTenantId\"\nWrite-OctopusInformation \"Allow Redeployment: $allowRedeployToTargetEnvironmentValue\"\nWrite-OctopusInformation \"What If: $whatIfValue\"\nWrite-OctopusInformation \"Wait for deployment: $waitForFinishValue\"\nWrite-OctopusInformation \"Cancel deployment in seconds: $deploymentCancelInSeconds\"\n\n$project = Get-OctopusProject -projectName $projectName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$tenantToDeploy = Get-OctopusTenant -deploymentTenantId $deploymentTenantId -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$targetEnvironment = Get-OctopusEnvironment -environmentName $environmentName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n\nTest-ProjectTenantSettings -tenantToDeploy $tenantToDeploy -project $project -targetEnvironment $targetEnvironment\n\n$sourceEnvironment = Get-OctopusEnvironment -environmentName $sourceEnvironmentName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$channel = Get-OctopusChannel -channelName $ChannelName -defaultUrl $DefaultUrl -project $project -spaceId $spaceId -octopusApiKey $octopusApiKey\n$lifecycle = Get-OctopusLifecycle -channel $channel -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$phaseList = Get-LifecyclePhases -lifecycle $lifecycle -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$previousPhase = Get-PreviousPhase -phaseList $phaseList -targetEnvironment $targetEnvironment -sourceEnvironment $sourceEnvironment\n$targetPhase = Get-DestinationPhase -phaseList $phaseList -targetEnvironment $targetEnvironment\n\n$releaseToPromote = Get-ReleaseToPromote -channel $channel -releaseNumber $releaseNumber -environmentName $environmentName -targetPhase $targetPhase -previousPhase $previousPhase -defaultUrl $defaultUrl -spaceId $spaceid -octopusApiKey $octopusApiKey\n\nif ($null -eq $releaseToPromote.Release)\n{\n    Write-OctopusCritical \"Unable to find the latest release for $releaseNumber to promote to $environmentName.\"\n    exit 1\n}\n\nif ($releaseToPromote.ReleaseAlreadyDeployedToTargetEnvironment -contains $releaseToPromote.Release.Id -and $allowRedeployToTargetEnvironment -eq $false)\n{\n\tif ($null -eq $previousPhase)\n    {\n    \tWrite-OctopusSuccess \"We are in the first phase for $($channel.Name)'s lifecycle.  The latest created release matching release number $releaseNumber is $($releaseToPromote.Release.Version).  Release $($releaseToPromote.Release.Version) already has been deployed to $environmentName.  Redeployments set to no, exiting.\"\n    }\n    else\n    {\n    \tWrite-OctopusSuccess \"The latest release deployed to $($previousPhase.Name) is $($releaseToPromote.Release.Version) and has already been deployed to $environmentName.  Redeployments set to no, exiting.\"\n    }\n    \n    if ($whatIf -eq $true)\n\t{    \t    \t    \t\n    \tWrite-OctopusInformation \"Whatif set to true, setting the output variable\"\n    \tWrite-OctopusInformation \"Setting the output variable ReleaseToPromote to $($releaseToPromote.Release.Version)\"\n    \tSet-OctopusVariable -Name \"ReleaseToPromote\" -Value ($releaseToPromote.Release.Version)\n    }\n    \n    exit 0\n}\n\nif ($null -eq $previousPhase)\n{\n\tWrite-OctopusSuccess \"We are in the first phase for $($channel.Name)'s lifecycle.  The latest created release matching release number $releaseNumber is $($releaseToPromote.Release.Version).\"\n}\nelse\n{\n\tWrite-OctopusSuccess \"Release $($releaseToPromote.Release.Version) is the most recent release deployed to the previous phase $($previousPhase.Name).\"\n}\n\n$deploymentFormValues = Get-ValuesForPromptedVariables -releaseToPromote $releaseToPromote -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey -targetEnvironment $targetEnvironment -deploymentTenantId $tenantToDeploy -formValues $formValues\n\n$createdRelease = @{\n    EnvironmentId = $targetEnvironment.Id;\n    ExcludeMachineIds = @();\n    ForcePackageDownload = $false;\n    ForcePackageRedeployment = $false;\n    FormValues = $deploymentFormValues;\n    QueueTime = $null;\n    QueueTimeExpiry = $null;\n    ReleaseId = $releaseToPromote.Release.Id;\n    SkipActions = @();\n    SpecificMachineIds = @();\n    TenantId = $null;\n    UseGuidedFailure = $false\n}\n\nif ([string]::IsNullOrWhiteSpace($deploymentTenantId) -eq $false -and $project.TenantedDeploymentMode -ne \"Untenanted\")\n{\n    $createdRelease.TenantId = $deploymentTenantId\n}\n\nif ($whatIf -eq $true)\n{\n    Write-OctopusSuccess \"What if set to true, exiting\"\n    Write-OctopusVerbose \"Would have done a POST to /api/$spaceId/deployments with the body:\"\n    Write-OctopusVerbose $createdRelease\n    Write-OctopusInformation \"Setting the output variable ReleaseToPromote to $($releaseToPromote.Release.Version)\"\n    Set-OctopusVariable -Name \"ReleaseToPromote\" -Value ($releaseToPromote.Release.Version)\n    exit 0\n}\n\nCreate-NewOctopusDeployment -releaseToPromote $releaseToPromote -targetEnvironment $targetEnvironment -createdRelease $createdRelease -project $project -waitForFinish $waitForFinish -deploymentCancelInSeconds $deploymentCancelInSeconds -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId"
    },
    "Parameters": [
      {
        "Id": "f7357d18-33c3-4f1e-883d-613e13e098cd",
        "Name": "ChildProject.Api.Key",
        "Label": "Octopus API Key",
        "HelpText": "*Required* \n\n\nThe API key of the user authorized to query and promote releases.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "d9afe2db-720a-40d0-928e-6d1763286fc9",
        "Name": "ChildProject.Project.Name",
        "Label": "Child Project Name",
        "HelpText": "*Required* \n\n\nThe name of the child project you wish to deploy.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "789a658e-ee7f-4bf2-aaa3-cf1a998adf57",
        "Name": "ChildProject.Channel.Name",
        "Label": "Child Project Channel",
        "HelpText": "*Optional* \n\n\nThe name of the channel in the child project tied to the release you wish to deploy.  If left blank it will look at the project's default channel.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "dfe2c259-11c4-491f-900a-db7c37d82836",
        "Name": "ChildProject.Release.Number",
        "Label": "Child Project Release Number",
        "HelpText": "*Optional* \n\n\nThe release number to filter on.  This field accepts:\n- *No value (default)* - the most recent release for the channel in the calculated previous environment or specified previous environment\n- *Wild card* - Example: `2020.2.*` will find the most recent release with a major version of 2020 and a minor version of 2.  Please note the period is important, if you enter `2020.1*` you could end up with 2020.10 releases.\n- *Specific version* - Example: `2020.2.1.2` will deploy that specific version.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "04b2e549-888f-4a10-811c-f325690b3a80",
        "Name": "ChildProject.Destination.EnvironmentName",
        "Label": "Destination Environment Name",
        "HelpText": "The name of the destination environment.  \n\nExamples: `Development`, `Test`, or `Production`\n\n\nThe parent project and child project do *NOT* have to have the same lifecycle.  The only requirement is all the previous phases' requirements in the child project must be met.  For example, if the child project's life cycle is Dev->Test->Staging->Prod and the parent project lifecycle is Staging->Prod and you wish to deploy to staging, then the child project's release must go through Dev and Test first.",
        "DefaultValue": "#{Octopus.Environment.Name}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "e439fdb3-0697-4ea1-8b2c-8e343bfaa5af",
        "Name": "ChildProject.SourceEnvironment.Name",
        "Label": "Source Environment Name",
        "HelpText": "*Optional* \n\n\nThe name of the source environment.  When blank the source environment will be calculated using the channel's lifecycle.  \n\n\nExamples: `Development`, `Test`, or `Production`\n\n\n**Please Note:** The most recently created release will be selected when the destination environment is the first phase of the child project's lifecycle.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "4f9b232a-43ce-484c-9b30-0d3b195ddb15",
        "Name": "ChildProject.Prompted.Variables",
        "Label": "Child Project Prompted Variables",
        "HelpText": "*Optional*\n\n\nValues for any prompted variables for the release. Each new line represents a new variable. This will only work with string variable types, text, and sensitive values.\n\n\nUse the format Name::Value \n\n\nFor example:\n\n\n```\nPromptedVariableName::My Super Awesome Value\nOtherPromptedVariable::Other Super Awesome Value\n```",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "MultiLineText"
        }
      },
      {
        "Id": "f363d44b-b51c-4404-ac68-495561856726",
        "Name": "ChildProject.ForceRedeployment.Value",
        "Label": "Force Redeployment",
        "HelpText": "Set to `Yes` to force the redeployment of the release to the destination environment. \n\nRecommend using prompted variables with the default value set to `No` to set this value.  The options are `Yes` and `No`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No"
        }
      },
      {
        "Id": "563136dd-b848-49f8-b9ef-57acc879dbc2",
        "Name": "ChildProject.WhatIf.Value",
        "Label": "What If",
        "HelpText": "By default, this step will trigger a deployment.\n\n\nSetting this value to Yes will perform all the work up to triggering the deployment.  This is useful for approval steps, you can run this step (or set of steps) to get the list of child releases to deploy, and then verify them via a manual intervention.\n\n\nWhen this is set to `Yes` it will set an output variable `ReleaseToPromote`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No"
        }
      },
      {
        "Id": "d1d42293-e6fc-425e-a81c-973cc81eaa1d",
        "Name": "ChildProject.WaitForFinish.Value",
        "Label": "Wait for finish",
        "HelpText": "Set to `Yes` to avoid waiting for the deployment to finish.  Will only be used when *What If* is set to `No`.",
        "DefaultValue": "Yes",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No"
        }
      },
      {
        "Id": "fd04d6fc-cc78-4a4f-9373-e48c349c9b07",
        "Name": "ChildProject.CancelDeployment.Seconds",
        "Label": "Wait for Deployment",
        "HelpText": "Amount of time, in seconds, to wait for the deployment to finish.  Default is 1800 seconds, or 30 minutes.",
        "DefaultValue": "1800",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      }
    ],
    "$Meta": {
      "ExportedAt": "2020-12-18T20:45:39.981Z",
      "OctopusVersion": "2020.5.1",
      "Type": "ActionTemplate"
    },
    "LastModifiedBy": "octopusbob",
    "Category": "octopus"
  }