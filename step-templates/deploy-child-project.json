{
    "Id": "0dac2fe6-91d5-4c05-bdfb-1b97adf1e12e",
    "Name": "Deploy Child Octopus Deploy Project",
    "Description": "This step will find the latest release in a source environment matching your criteria and deploy it.  \n\nUse cases:\n- As a user, I want to create a single parent release `2020.2.1`.  When I promote the parent release I want the latest child releases matching `2020.2.1.*` to be promoted to the next environment.\n- As a user, I want the latest release in the dev environment to be promoted to the test environment.  Not the most recently created release, the most recent release deployed that environment.\n- As a user, when we are finished with our QA process, we want to automatically push the latest releases from QA to Staging without having to manually promote each release.\n- As a user, I'd like to set up a nightly build to promote the latest releases from Dev to QA\n- As a user, I'd like to be able to deploy a suite of applications to a tenant.  If the tenant isn't assigned to the project then skip over.\n- As a user, I'd like to see what releases would go to production and approve those releases without having to manually verify and approve each one.\n- As a user, I'd like to be able to target specific machines in my parent project and only have child projects deploy associated with those machines.\n- As a user, I'd like to be able to exclude specific machines in my parent project and only have child projects deploy to the remaining machines.\n- As a user, I'd like to have a single deployment target trigger on my parent project and when I scale up my servers deploy the appropriate child projects.\n- As a user, I'd like to be able to approve the deployments and then schedule them to be deployed at 7 PM\n- As a user, I'd like to be able to have one space for orchestration projects and another space for developers to work in.\n\nThis step template also allows you to skip deployments to the destination environment if it has already been deployed.",
    "ActionType": "Octopus.Script",
    "Version": 4,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "$ErrorActionPreference = 'Stop'\n[Net.ServicePointManager]::SecurityProtocol = [Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls12\n\n$octopusApiKey = $OctopusParameters[\"ChildProject.Api.Key\"]\n$projectName = $OctopusParameters[\"ChildProject.Project.Name\"]\n$ChannelName = $OctopusParameters[\"ChildProject.Channel.Name\"]\n$releaseNumber = $OctopusParameters[\"ChildProject.Release.Number\"]\n$environmentName = $OctopusParameters[\"ChildProject.Destination.EnvironmentName\"]\n$sourceEnvironmentName = $OctopusParameters[\"ChildProject.SourceEnvironment.Name\"]\n$formValues = $OctopusParameters[\"ChildProject.Prompted.Variables\"]\n$destinationSpaceId = $OctopusParameters[\"Octopus.Space.Id\"]\n$destinationSpaceName = $OctopusParameters[\"ChildProject.Space.Name\"]\n$deploymentTenantId = $OctopusParameters[\"Octopus.Deployment.Tenant.Id\"]\n$allowRedeployToTargetEnvironmentValue = $OctopusParameters[\"ChildProject.ForceRedeployment.Value\"]\n$whatIfValue = $OctopusParameters[\"ChildProject.WhatIf.Value\"]\n$waitForFinishValue = $OctopusParameters[\"ChildProject.WaitForFinish.Value\"]\n$deploymentCancelInSeconds = $OctopusParameters[\"ChildProject.CancelDeployment.Seconds\"]\n$specificMachines = $OctopusParameters[\"Octopus.Deployment.SpecificMachines\"]\n$excludeMachines = $OctopusParameters[\"Octopus.Deployment.ExcludedMachines\"]\n$deploymentMachines = $OctopusParameters[\"Octopus.Deployment.Machines\"]\n$ignoreSpecificMachineMismatchValue = $OctopusParameters[\"ChildProject.Deployment.IgnoreSpecificMachineMismatch\"]\n$parentDeploymentTaskId = $OctopusParameters[\"Octopus.Task.Id\"]\n$parentProjectName = $OctopusParameters[\"Octopus.Project.Name\"]\n$parentReleaseNumber = $OctopusParameters[\"Octopus.Release.Number\"]\n$parentEnvironmentName = $OctopusParameters[\"Octopus.Environment.Name\"]\n$parentDeploymentId = $OctopusParameters[\"Octopus.Deployment.Id\"]\n$parentProjectSlug = $OctopusParameters[\"Octopus.Project.Id\"]\n$autoapproveChildManualInterventionsValue = $OctopusParameters[\"ChildProject.ManualInterventions.UseApprovalsFromParent\"]\n$saveReleaseNotesAsArtifactValue = $OctopusParameters[\"ChildProject.ReleaseNotes.SaveAsArtifact\"]\n$futureDeploymentDate = $OctopusParameters[\"ChildProject.Deployment.FutureTime\"]\n$errorHandleForNoRelease = $OctopusParameters[\"ChildProject.Release.NotFoundError\"]\n\n$DefaultUrl = $OctopusParameters['Octopus.Web.BaseUrl']\n# Use \"Octopus.Web.ServerUri\" if it is available\nif ($OctopusParameters['Octopus.Web.ServerUri']) {\n  $DefaultUrl = $OctopusParameters['Octopus.Web.ServerUri']\n}\n\nfunction Write-OctopusVerbose\n{\n    param($message)\n    \n    Write-Verbose $message  \n}\n\nfunction Write-OctopusInformation\n{\n    param($message)\n    \n    Write-Host $message  \n}\n\nfunction Write-OctopusSuccess\n{\n    param($message)\n\n    Write-Highlight $message \n}\n\nfunction Write-OctopusWarning\n{\n    param($message)\n\n    Write-Warning \"$message\" \n}\n\nfunction Write-OctopusCritical\n{\n    param ($message)\n\n    Write-Error \"$message\" \n}\n\nfunction Invoke-OctopusApi\n{\n    param\n    (\n        $octopusUrl,\n        $endPoint,\n        $spaceId,\n        $apiKey,\n        $method,\n        $item     \n    )\n\n    if ([string]::IsNullOrWhiteSpace($SpaceId))\n    {\n        $url = \"$OctopusUrl/api/$EndPoint\"\n    }\n    else\n    {\n        $url = \"$OctopusUrl/api/$spaceId/$EndPoint\"    \n    }  \n\n    try\n    {\n        if ($null -eq $item)\n        {\n            Write-OctopusVerbose \"No data to post or put, calling bog standard invoke-restmethod for $url\"\n            return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -ContentType 'application/json; charset=utf-8'\n        }\n\n        $body = $item | ConvertTo-Json -Depth 10\n        Write-OctopusVerbose $body\n\n        Write-OctopusInformation \"Invoking $method $url\"\n        return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -Body $body -ContentType 'application/json; charset=utf-8'\n    }\n    catch\n    {\n        if ($null -ne $_.Exception.Response)\n        {\n            if ($_.Exception.Response.StatusCode -eq 401)\n            {\n                Write-OctopusCritical \"Unauthorized error returned from $url, please verify API key and try again\"\n            }\n            elseif ($_.Exception.Response.statusCode -eq 403)\n            {\n                Write-OctopusCritical \"Forbidden error returned from $url, please verify API key and try again\"\n            }\n            else\n            {                \n                Write-OctopusVerbose -Message \"Error calling $url $($_.Exception.Message) StatusCode: $($_.Exception.Response.StatusCode )\"\n            }            \n        }\n        else\n        {\n            Write-OctopusVerbose $_.Exception\n        }\n    }\n\n    Throw \"There was an error calling the Octopus API please check the log for more details\"\n}\n\nfunction Test-EmptyItemList\n{\n    param(\n        $itemList,\n        $itemName\n    )\n\n    if ($itemList.Items.Count -eq 0)\n    {\n        Write-OctopusCritical \"Unable to find $itemName.  Exiting with an exit code of 1.\"\n        Exit 1\n    }\n}\n\nfunction Get-OctopusSpaceId\n{\n\tparam(\n    \t$spaceName,\n        $spaceId,\n        $defaultUrl,\n        $octopusApiKey    \n    )\n    \n    if ([string]::IsNullOrWhiteSpace($spaceName))\n    {\n    \treturn $spaceId\n    }\n    \n    Write-OctopusInformation \"Attempting to find space with the name of $spaceName\"\n    \n    $spaceList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"spaces?partialName=$([uri]::EscapeDataString($spaceName))&skip=0&take=100\" -spaceId $null -apiKey $octopusApiKey -method \"GET\"\n    Test-EmptyItemList -itemList $spaceList -itemName $spaceName\n    $space = $spaceList.Items | Where-Object { $_.Name -eq $spaceName }\n    Write-OctopusInformation \"Successfully found $spaceName with id of $($space.Id)\"\n\n    return $space.Id\n}\n\nfunction Get-OctopusProject\n{\n    param (\n        $projectName,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find project with name of $projectName\"\n    $projectList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"projects?partialName=$([uri]::EscapeDataString($projectName))&skip=0&take=100\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    Test-EmptyItemList -itemList $projectList -itemName $projectName\n    $project = $projectList.Items | Where-Object { $_.Name -eq $projectName }\n    Write-OctopusInformation \"Successfully found $projectName with id of $($project.Id)\"\n\n    return $project\n}\n\nfunction Get-OctopusEnvironment\n{\n    param (\n        $environmentName,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ([string]::IsNullOrWhiteSpace($environmentName))\n    {\n        return $null\n    }\n\n    Write-OctopusInformation \"Attempting to find environment with name of $environmentName\"\n    $targetEnvironmentList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"environments?partialName=$([uri]::EscapeDataString($environmentName))&skip=0&take=100\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    Test-EmptyItemList -itemList $targetEnvironmentList -itemName $environmentName\n    $targetEnvironment = $targetEnvironmentList.Items | Where-Object { $_.Name -eq $environmentName }\n    Write-OctopusInformation \"Successfully found $environmentName with id of $($targetEnvironment.Id)\"\n\n    return $targetEnvironment\n}\n\nfunction Get-OctopusTenant\n{\n    param (\n        $deploymentTenantId,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    if ([string]::IsNullOrWhiteSpace($deploymentTenantId))\n    {\n        return $null\n    }\n    \n    $tenantToDeploy = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"tenants/$deploymentTenantId\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    if ($null -eq $tenantToDeploy)\n    {\n        Write-OctopusCritical \"Unable to find the specified tenant $deploymentTenantId\"\n        Exit 1\n    }\n    else\n    {\n        Write-OctopusInformation \"Found tenant $($tenantToDeploy.Name)\"\n    }\n    \n    return $tenantToDeploy\n}\n\nfunction Get-OctopusChannel\n{\n    param (\n        $channelName,\n        $project,\n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the channel information for project $projectName matching the channel name $channelName\"\n    $channelList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"projects/$($project.Id)/channels?skip=0&take=1000\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    $channelToUse = $null\n    foreach ($channel in $channelList.Items)\n    {\n        if ([string]::IsNullOrWhiteSpace($channelName) -eq $true -and $channel.IsDefault -eq $true)\n        {\n            Write-OctopusVerbose \"The channel name specified is null or empty and the current channel $($channel.Name) is the default, using that\"\n            $channelToUse = $channel\n            break\n        }\n\n        if ([string]::IsNullOrWhiteSpace($channelName) -eq $false -and $channel.Name.Trim().ToLowerInvariant() -eq $ChannelName.Trim().ToLowerInvariant())\n        {\n            Write-OctopusVerbose \"The channel name specified $channelName matches the the current channel $($channel.Name) using that\"\n            $channelToUse = $channel\n            break\n        }\n    }\n\n    if ($null -eq $channelToUse)\n    {\n        Write-OctopusCritical \"Unable to find a channel to use.  Exiting with an exit code of 1.\"\n        exit 1\n    }\n\n    return $channelToUse\n}\n\nfunction Get-OctopusLifecycle\n{\n    param (\n        $channel,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the lifecycle information $($channel.Name)\"\n    if ($null -eq $channel.LifecycleId)\n    {\n        $lifecycleName = \"Default Lifecycle\"\n        $lifecycleList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles?partialName=$([uri]::EscapeDataString($lifecycleName))&skip=0&take=1\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $lifecycle = $lifecycleList.Items[0]\n    }\n    else\n    {\n        $lifecycle = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($channel.LifecycleId)\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n    }\n\n    Write-Host \"Successfully found the lifecycle $($lifecycle.Name) to use for this channel.\"\n\n    return $lifecycle\n}\n\nfunction Get-LifecyclePhases\n{\n    param (\n        $lifecycle,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Attempting to find the phase in the lifecycle $($lifecycle.Name) with the environment $environmentName to find the previous phase.\"\n    if ($lifecycle.Phases.Count -eq 0)\n    {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has no set phases, calling the preview endpoint.\"\n        $lifecyclePreview = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"lifecycles/$($lifecycle.Id)/preview\" -spaceId $spaceId -apiKey $octopusApiKey -method \"GET\"\n        $phases = $lifecyclePreview.Phases\n    }\n    else\n    {\n        Write-OctopusInformation \"The lifecycle $($lifecycle.Name) has set phases, using those.\"\n        $phases = $lifecycle.Phases    \n    }\n\n    Write-OctopusInformation \"Found $($phases.Length) phases in this lifecycle.\"\n    return $phases\n}\n\nfunction Get-PreviousPhase\n{\n    param (\n        $phaseList,\n        $targetEnvironment,\n        $sourceEnvironment\n    )\n\n    for ($i = 0; $i -lt $phaseList.Length; $i++)\n    {\n        Write-Host \"Checking to see if $($phaseList[$i].Name) contains the target environment id $($targetEnvironment.Id)\"\n\n        if ($phaseList[$i].AutomaticDeploymentTargets -contains $targetEnvironment.Id -or $phaseList[$i].OptionalDeploymentTargets -contains $targetEnvironment.Id)    \n        {\n            Write-OctopusVerbose \"The phase $($phaseList[$i].Name) has the environment $($targetEnvironment.Name).\"\n            \n            if ($i -eq 0)\n            {\n            \tWrite-OctopusInformation \"This is the first phase in the lifecycle, there is no previous phase\"\n                return $null\n            }\n            \n            $previousPhase = $phaseList[($i - 1)]\n            Write-OctopusInformation \"The previous phase is $($previousPhase.Name).\"\n\n            if ($null -eq $sourceEnvironment)\n            {\n                return $previousPhase                \n            }\n\n            Write-OctopusVerbose \"A source environment was specified, verifying this phase has the source environment\"\n            if ($previousPhase.AutomaticDeploymentTargets -contains $sourceEnvironment.Id -or $previousPhase.OptionalDeploymentTargets -contains $sourceEnvironment.Id)\n            {\n                Write-OctopusVerbose \"The previous phase has the source environment.\"\n                return $previousPhase\n            }\n        }\n    } \n    \n    Write-OctopusCritical \"Unable to find the previous phase in this lifecycle.  Exiting with exit code of 1\"\n    Exit 1\n}\n\nfunction Get-DestinationPhase\n{\n    param (\n        $phaseList,\n        $targetEnvironment\n    )\n\n    for ($i = 0; $i -lt $phaseList.Length; $i++)\n    {\n        Write-Host \"Checking to see if $($phaseList[$i].Name) contains the target environment id $($targetEnvironment.Id)\"\n\n        if ($phaseList[$i].AutomaticDeploymentTargets -contains $targetEnvironment.Id -or $phaseList[$i].OptionalDeploymentTargets -contains $targetEnvironment.Id)    \n        {\n            Write-OctopusVerbose \"The phase $($phaseList[$i].Name) has the environment $($targetEnvironment.Name).\"\n\n            return $phaseList[$i]            \n        }\n    } \n    \n    Write-OctopusCritical \"Unable to find the previous phase in this lifecycle.  Exiting with exit code of 1\"\n    Exit 1\n}\n\nfunction Get-ReleaseCanBePromotedToTargetEnvironment\n{\n    param (\n        $release,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $targetEnvironment,\n        $deploymentTenantId\n    )\n\n    Write-OctopusInformation \"Pulling the deployment template information for release $($release.Version)\"\n    $releaseDeploymentTemplate = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"releases/$($release.Id)/deployments/template\" -spaceId $spaceId -method GET -apiKey $octopusApiKey\n\n    $releaseCanBeDeployedToDestination = $false    \n    Write-OctopusInformation \"Looping through deployment template list for $($release.Version) to see if it can be deployed to $($targetEnvironment.Name).\"\n    foreach ($promoteToEnvironment in $releaseDeploymentTemplate.PromoteTo)\n    {\n        if ($promoteToEnvironment.Id -eq $targetEnvironment.Id)\n        {\n            Write-OctopusInformation \"The environment $($targetEnvironment.Name) was found in the list of environments.\"\n            $releaseCanBeDeployedToDestination = $true\n            break\n        }\n    }    \n\n    if ([string]::IsNullOrWhiteSpace($deploymentTenantId) -eq $true -or $releaseDeploymentTemplate.TenantPromotions.Length -le 0)\n    {\n        return $releaseCanBeDeployedToDestination\n    }\n\n    $releaseCanBeDeployedToDestination = $false\n    Write-OctopusInformation \"The tenant id was supplied, looping through the tenant templates to see if it can be deployed to $($targetEnvironment.Name).\"\n    foreach ($tenantPromotion in $releaseDeploymentTemplate.TenantPromotions)\n    {\n        if ($tenantPromotion.Id -ne $deploymentTenantId)\n        {\n            Write-OctopusVerbose \"The tenant ids don't match, moving onto the next one\"\n            continue\n        }\n\n        foreach ($promoteToEnvironment in $tenantPromotion.PromoteTo)\n        {\n            if ($promoteToEnvironment.Id -ne $targetEnvironment.Id)\n            {\n                Write-OctopusVerbose \"The environments don't match, moving onto the next one.\"\n                continue\n            }\n\n            Write-OctopusInformation \"The environment $($targetEnvironment.Name) was found in the list of environments tenant $deploymentTenantId can promote to\"\n            $releaseCanBeDeployedToDestination = $true\n        }\n    }\n\n    return $releaseCanBeDeployedToDestination\n}\n\nfunction Get-DeploymentPreview\n{\n    param (\n        $releaseToPromote,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $targetEnvironment,\n        $deploymentTenant\n    )\n\n    if ($null -eq $deploymentTenant)\n    {\n        Write-OctopusInformation \"The deployment tenant id was not sent in, generating a preview by hitting releases/$($releaseToPromote.Release.Id)/deployments/preview/$($targetEnvironment.Id)?includeDisabledSteps=true\"    \n        return Invoke-OctopusApi -octopusUrl $defaultUrl -endPoint \"releases/$($releaseToPromote.Release.Id)/deployments/preview/$($targetEnvironment.Id)?includeDisabledSteps=true\" -apiKey $octopusApiKey -method \"GET\" -spaceId $spaceId\n    }\n\n    Write-OctopusInformation \"The deployment tenant id was sent in, generating a preview by hitting releases/$($releaseToPromote.Release.Id)/deployments/previews\" \n    $requestBody = @{\n    \t\tDeploymentPreviews = @(\n    \t\t\t@{\n                \tTenantId = $deploymentTenant.Id;\n            \t\tEnvironmentId = $targetEnvironment.Id\n                 }\n            )\n    }\n    return Invoke-OctopusApi -octopusUrl $defaultUrl -endPoint \"releases/$($releaseToPromote.Release.Id)/deployments/previews\" -apiKey $octopusApiKey -method \"POST\" -spaceId $spaceId -item $requestBody -itemIsArray $true\n}\n\nfunction Get-ValuesForPromptedVariables\n{\n    param (\n        $deploymentPreview,\n        $formValues\n    )\n\n    $deploymentFormValues = @{}\n    if ([string]::IsNullOrWhiteSpace($formValues) -eq $true)\n    {\n        return $deploymentFormValues\n    }   \n    \n    $promptedValueList = @(($formValues -Split \"`n\").Trim())\n    Write-OctopusVerbose $promptedValueList.Length\n    \n    foreach($element in $deploymentPreview.Form.Elements)\n    {\n        $nameToSearchFor = $element.Control.Name\n        $uniqueName = $element.Name\n        $isRequired = $element.Control.Required\n        \n        $promptedVariablefound = $false\n        \n        Write-OctopusVerbose \"Looking for the prompted variable value for $nameToSearchFor\"\n        foreach ($promptedValue in $promptedValueList)\n        {\n            $splitValue = $promptedValue -Split \"::\"\n            Write-OctopusVerbose \"Comparing $nameToSearchFor with provided prompted variable $($promptedValue[0])\"\n            if ($splitValue.Length -gt 1)\n            {\n                if ($nameToSearchFor -eq $splitValue[0])\n                {\n                    Write-OctopusVerbose \"Found the prompted variable value $nameToSearchFor\"\n                    $deploymentFormValues[$uniqueName] = $splitValue[1]\n                    $promptedVariableFound = $true\n                    break\n                }\n            }\n        }\n        \n        if ($promptedVariableFound -eq $false -and $isRequired -eq $true)\n        {\n            Write-OctopusCritical \"Unable to find a value for the required prompted variable $nameToSearchFor, exiting\"\n            Exit 1\n        }\n    }\n}\n\nfunction Test-ProjectTenantSettings\n{\n    param (\n        $tenantToDeploy,\n        $project,\n        $targetEnvironment\n    )\n\n\tWrite-OctopusVerbose \"About to check if $tenantToDeploy is not null and tenant deploy mode on the project $($project.TenantedDeploymentMode) <> Untenanted\"\n    if ($null -ne $tenantToDeploy -and $project.TenantedDeploymentMode -ne \"Untenanted\")\n    {\n    \tWrite-OctopusInformation \"Found the tenant $($tenantToDeploy.Name) checking to see if $($project.Name) is assigned to it.\"\n        \n        Write-OctopusVerbose \"Checking to see if $($tenantToDeploy.ProjectEnvironments) has $($project.Id) as a property.\"\n        if ($null -eq (Get-Member -InputObject $tenantToDeploy.ProjectEnvironments -Name $project.Id -MemberType Properties))\n        {\n            Write-OctopusSuccess \"The tenant $($tenantToDeploy.Name) is not assigned to $($project.Name).  Exiting.\"\n            Insert-EmptyOutputVariables -releaseToPromote $null\n            \n            Exit 0\n        }\n\n\t\tWrite-OctopusInformation \"The tenant $($tenantToDeploy.Name) is assigned to $($project.Name).  Now checking to see if it can be deployed to the target environment.\"\n        $tenantProjectId = $project.Id\n        \n        Write-OctopusVerbose \"Checking to see if $($tenantToDeploy.ProjectEnvironments.$tenantProjectId) has $($targetEnvironment.Id)\"\n        \n        if ($tenantToDeploy.ProjectEnvironments.$tenantProjectId -notcontains $targetEnvironment.Id)\n        {\n            Write-OctopusSuccess \"The tenant $($tenantToDeploy.Name) is assigned to $($project.Name), but not to the environment $($targetEnvironment.Name).  Exiting.\"\n            Insert-EmptyOutputVariables -releaseToPromote $null\n            \n            Exit 0\n        }\n    }\n}\n\nfunction Test-ReleaseList\n{\n\tparam (\n    \t$releaseList,\n        $errorHandleForNoRelease,\n        $releaseNumber,\n        $channel\n    )\n    \n    if ($releaseList.Items.Length -gt 0)\n    {\n    \treturn\n    }\n    \n    $errorMessage = \"No releases were found in the channel $($channel.Name)\"\n    if ([string]::IsNullOrWhitespace($releaseNumber) -eq $false)\n    {\n    \t$errorMessage = \"$errorMessage matching $releaseNumber\"\n    }\n    \n    if ($errorHandleForRelease -eq \"Error\")\n    {\n    \tWrite-OctopusCritical $errorMessage\n        exit 1\n    }\n    \n    Insert-EmptyOutputVariables -releaseToPromote $null\n    \n    if ($errorHandleForRelease -eq \"Skip\")\n    {\n    \tWrite-OctopusInformation $errorMessage\n        exit 0\n    }\n    \n    Write-OctopusWarning $errorMessage\n    exit 0\n}\n\nfunction Get-ReleasesForChannel\n{\n    param (\n        $channel,        \n        $defaultUrl,\n        $spaceId,\n        $octopusApiKey,\n        $releaseNumber,\n        $errorHandleForNoRelease\n    )\n\n    if ([string]::IsNullOrWhiteSpace($releaseNumber) -eq $true)\n    {\n    \tWrite-OctopusInformation \"The release number was not set, pulling back the most recent 100 releases from the channel $($channel.Name) to find the release to deploy.\"\n        $releaseList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"channels/$($channel.Id)/releases?skip=0&take=100\" -method \"Get\" -apiKey $octopusApiKey -spaceId $spaceId\n        \n        Test-ReleaseList -releaseList $releaseList -errorHandleForNoRelease $errorHandleForNoRelease -releaseNumber $releaseNumber -channel $channel \n        \n        return $releaseList\n    }\n\n\tWrite-OctopusInformation \"Pulling back all the releases that match $releaseNumber in the channel $($channel.Name)\"\n\t$releaseNumberToUse = $releaseNumber\n\tif ($releaseNumberToUse.EndsWith('*') -eq $true)\n    {\n    \t$releaseNumberToUse = $releaseNumberToUse.Replace(\"*\", \"\")\n    }\n    \n    $releaseList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"channels/$($channel.Id)/releases?searchByVersion=$releaseNumberToUse&skip=0&take=1000\" -method \"Get\" -apiKey $octopusApiKey -spaceId $spaceId\n    \n    Test-ReleaseList -releaseList $releaseList -errorHandleForNoRelease $errorHandleForNoRelease -releaseNumber $releaseNumber -channel $channel \n        \n    return $releaseList\n}\n\nfunction Test-ReleaseToPromote\n{\n\tparam (\n    \t$releaseToPromote,\n        $errorHandleForNoRelease,\n        $releaseNumber,\n        $previousPhase,\n        $environmentName\n    )\n    \n    if ($null -ne $releaseToPromote.Release)\n    {\n    \treturn\n    }\n        \n    $errorMessage = \"No releases were found\"\n    \n    if ($null -ne $previousPhase)\n    {\n    \t$errorMessage = \"$errorMessage in the previous phase $($previousPhase.Name)\"\n    }\n    \n    if ([string]::IsNullOrWhitespace($releaseNumber) -eq $false)\n    {\n    \t$errorMessage = \"$errorMessage matching $releaseNumber\"\n    }\n    \n    $errorMessage = \"$errorMessage that can be promoted to $environmentName\"\n    \n    if ($errorHandleForRelease -eq \"Error\")\n    {\n    \tWrite-OctopusCritical $errorMessage\n        exit 1\n    }\n    \n    Insert-EmptyOutputVariables -releaseToPromote $null\n    \n    if ($errorHandleForRelease -eq \"Skip\")\n    {\n    \tWrite-OctopusInformation $errorMessage\n        exit 0\n    }\n    \n    Write-OctopusWarning $errorMessage\n    exit 0\n}\n\nfunction Get-ReleaseToPromote\n{\n\tparam (\n    \t$channel,\n        $releaseNumber,\n        $environmentName,\n        $targetPhase,\n        $previousPhase,\n        $defaultUrl,\n        $spaceid,\n        $octopusApiKey,\n        $errorHandleForNoRelease\n    )\n    \n    $releaseList = Get-ReleasesForChannel -spaceId $spaceId -defaultUrl $DefaultUrl -octopusApiKey $octopusApiKey -channel $channel -releaseNumber $releaseNumber -errorHandleForNoRelease $errorHandleForNoRelease\n    $lastDeploymentTime = (Get-Date).AddYears(-50)\n        \n    $releaseToPromote = @{\n    \tRelease = $null;\n    \tReleaseAlreadyDeployedToTargetEnvironment = @()    \n    }\n       \n    foreach ($release in $releaseList.Items)\n    {\n        if ($null -eq $previousPhase)\n        {\n            Write-OctopusInformation \"Using the most recent release created because we are currently in the first phase of the lifecycle.\"\n            $releaseToPromote.Release = $release        \n        }\n        else\n        {\n            $releaseCanBeDeployedToDestination = Get-ReleaseCanBePromotedToTargetEnvironment -defaultUrl $DefaultUrl -release $release -spaceId $spaceId -octopusApiKey $octopusApiKey -targetEnvironment $targetEnvironment -deploymentTenantId $deploymentTenantId\n\n            if ($releaseCanBeDeployedToDestination -eq $false)\n            {\n                Write-OctopusInformation \"The release $($release.Version) cannot be deployed to $environmentName because it doesn't statisfy the lifecycle requirements, moving onto the next release.\"\n                continue\n            }  \n        }\n\n        Write-OctopusInformation \"Pulling progression information for release $($release.Version)\"\n        $releaseProgressionList = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"releases/$($release.Id)/progression\" -spaceId $spaceId -method \"GET\" -apiKey $octopusApiKey\n\n        $releaseDeploymentTime = $null\n        Write-OctopusVerbose \"Checking all $($releaseProgressionList.Phases.Length) phases of the release progression.\"\n        foreach ($phase in $releaseProgressionList.Phases)\n        {\n        \tWrite-OctopusVerbose \"Checking $($phase.Name) matches $($targetPhase.Name) and that $($phase.Progress) is Complete\"\n            if ($phase.Name.ToLowerInvariant().Trim() -eq $targetPhase.Name.ToLowerInvariant().Trim() -and $phase.Progress -eq \"Complete\")        \n            {         \n            \tWrite-OctopusVerbose \"The phases match, now checking on the deployments.\"\n                foreach ($deployment in $phase.Deployments)          \n                {\n                \tWrite-OctopusVerbose \"Checking $($deployment.Deployment.EnvironmentId) matches $($targetEnvironment.Id) and that $($deployment.Deployment.FailureEncountered) is false\"\n                    if ($deployment.Deployment.EnvironmentId -eq $targetEnvironment.Id -and $deployment.Deployment.FailureEncountered -eq $false)\n                    {\n                        Write-OctopusVerbose \"This release has already been deployed to the target environment\"  \n                        $releaseToPromote.ReleaseAlreadyDeployedToTargetEnvironment += $release.Id\n                    }\n                }                \n            }\n            \n            if ($null -eq $previousPhase)\n            {\n            \tWrite-OctopusVerbose \"The previous phase was null, typically because we are in the first phase of the lifecycle.  Skipping check for determining recent release.\" \n            \tbreak\n            }\n\n            if ($phase.Name.ToLowerInvariant().Trim() -eq $previousPhase.Name.ToLowerInvariant().Trim() -and $null -ne $phase.Deployments.Count -gt 0 -and $phase.Progress -eq \"Complete\")\n            {\n                Write-OctopusVerbose \"The phase $($phase.Name) matches the previous phase name.  Checking to see the last deployment time.\"\n                if ([string]::IsNullOrWhiteSpace($sourceEnvironment) -eq $true)\n                {\n                    $completedTime = [datetime]::Parse($phase.Deployments[0].Task.CompletedTime)\n                    Write-OctopusVerbose \"Checking to see if $completedTime for this deployment is greater than $lastDeploymentTime\"\n                    if ($completedTime -gt $lastDeploymentTime)\n                    {                \n                        $releaseDeploymentTime = $completedTime\n                        Write-OctopusVerbose \"The last time $($phase.Name) was deployed to was $releaseDeploymentTime\"    \n                    }\n                }\n                else\n                {\n                    foreach ($deployment in $phase.Deployments)    \n                    {\n                        if ($deployment.Deployment.EnvironmentId -eq $sourceEnvironment.Id -and $deployment.Deployment.FailureEncountered -eq $false)\n                        {\n                            $completedTime = [datetime]::Parse($deployment.Task.CompletedTime)\n                            if ($completedTime -gt $lastDeploymentTime)\n                            {                \n                                $releaseDeploymentTime = $completedTime\n                                Write-OctopusVerbose \"The last time $($phase.Name) was deployed to was $releaseDeploymentTime\"    \n                            }\n                        }\n                    }\n                }            \n            }\n        }  \n\n        if ($null -eq $previousPhase)\n        {\n            break\n        }\n\n        if ($null -ne $releaseDeploymentTime)\n        {\n            Write-OctopusInformation \"$($release.Version)'s next phase is to $environmentName.  So far it is the one with the most recent deployment to $($previousPhase.Name).\"\n            $releaseToPromote.Release = $release\n            $lastDeploymentTime = $releaseDeploymentTime\n        }\n    }\n    \n    Test-ReleaseToPromote -releaseToPromote $releaseToPromote -errorHandleForNoRelease $errorHandleForNoRelease -releaseNumber $releaseNumber -previousPhase $previousPhase -environmentName $environmentName\n    \n    return $releaseToPromote\n}\n\nfunction Create-NewOctopusDeployment\n{\n\tparam (\n    \t$releaseToPromote,\n        $targetEnvironment,\n        $createdRelease,\n        $project,\n        $waitForFinish,\n        $deploymentCancelInSeconds,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId,\n        $parentDeploymentApprovers,\n        $parentProjectName,\n        $parentReleaseNumber, \n        $parentEnvironmentName, \n        $parentDeploymentTaskId,\n        $parentProjectSlug,\n        $parentDeploymentId,\n        $autoapproveChildManualInterventions\n    )\n    \n    Write-OctopusSuccess \"Deploying $($releaseToPromote.Release.Version) to $($targetEnvironment.Name)\"\n\n    $createdDeployment = Invoke-OctopusApi -method \"POST\" -endPoint \"deployments\" -octopusUrl $DefaultUrl -apiKey $octopusApiKey -spaceId $spaceId -item $createdRelease\n    Write-OctopusInformation \"The task id for the new deployment is $($createdDeployment.TaskId)\"\n\n    Write-OctopusSuccess \"Deployment was successfully invoked, you can access the deployment [here]($defaultUrl/app#/$spaceId/projects/$($project.Slug)/deployments/releases/$($releaseToPromote.Release.Version)/deployments/$($CreatedDeployment.Id)?activeTab=taskSummary)\"\n    \n    if ($null -ne $createdRelease.QueueTime -and $waitForFinish -eq $true)\n    {\n    \tWrite-OctopusWarning \"The option to wait for the deployment to finish was set to yes AND a future deployment date was set to a future value.  Ignoring the wait for finish option and exiting.\"\n        return\n    }\n    \n    if ($waitForFinish -eq $true)\n    {\n        Write-OctopusSuccess \"Waiting until deployment has finished\"\n        $startTime = Get-Date\n        $currentTime = Get-Date\n        $dateDifference = $currentTime - $startTime\n\n        $numberOfWaits = 0    \n\n        While ($dateDifference.TotalSeconds -lt $deploymentCancelInSeconds)\n        {\n\t        $numberOfWaits += 1\n        \n            Write-Host \"Waiting 5 seconds to check status\"\n            Start-Sleep -Seconds 5\n            $taskStatusResponse = Invoke-OctopusApi -octopusUrl $DefaultUrl -spaceId $spaceId -apiKey $octopusApiKey -endPoint \"tasks/$($createdDeployment.TaskId)\" -method \"GET\"        \n            $taskStatusResponseState = $taskStatusResponse.State\n\n            if ($taskStatusResponseState -eq \"Success\")\n            {\n                Write-OctopusSuccess \"The task has finished with a status of Success\"\n                exit 0            \n            }\n            elseif($taskStatusResponseState -eq \"Failed\" -or $taskStatusResponseState -eq \"Canceled\")\n            {\n                Write-OctopusSuccess \"The task has finished with a status of $taskStatusResponseState status, stopping the deployment\"\n                exit 1            \n            }\n            elseif($taskStatusResponse.HasPendingInterruptions -eq $true)\n            {\n            \tif ($autoapproveChildManualInterventions -eq $true)\n                {\n                \tSubmit-ChildProjectDeploymentForAutoApproval -createdDeployment $createdDeployment -parentDeploymentApprovers $parentDeploymentApprovers -defaultUrl $DefaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId -parentProjectName $parentProjectName -parentReleaseNumber $parentReleaseNumber -parentEnvironmentName $parentEnvironmentName -parentDeploymentTaskId $parentDeploymentTaskId -parentProjectSlug $parentProjectSlug -parentDeploymentId $parentDeploymentId\n                }\n                else\n                {\n                \tif ($numberOfWaits -ge 10)\n                    {\n                \t\tWrite-OctopusSuccess \"The child project has pending manual intervention(s).  Unless you approve it, this task will time out.\"\n                    }\n                    else\n                    {\n                    \tWrite-OctopusInformation \"The child project has pending manual intervention(s).  Unless you approve it, this task will time out.\"                        \n                    }\n                }\n            }\n            \n            if ($numberOfWaits -ge 10)\n            {\n                Write-OctopusSuccess \"The task state is currently $taskStatusResponseState\"\n                $numberOfWaits = 0\n            }\n            else\n            {\n                Write-OctopusInformation \"The task state is currently $taskStatusResponseState\"\n            }  \n\n            $startTime = $taskStatusResponse.StartTime\n            if ($null -eq $startTime -or [string]::IsNullOrWhiteSpace($startTime) -eq $true)\n            {        \n                Write-Host \"The task is still queued, let's wait a bit longer\"\n                $startTime = Get-Date\n            }\n            $startTime = [DateTime]$startTime\n\n            $currentTime = Get-Date\n            $dateDifference = $currentTime - $startTime        \n        }\n\n        Write-OctopusCritical \"The cancel timeout has been reached, cancelling the deployment\"\n        Invoke-OctopusApi -octopusUrl $DefaultUrl -apiKey $octopusApiKey -spaceId $spaceId -method \"POST\" -endPoint \"tasks/$($createdDeployment.TaskId)/cancel\"    \n        Write-OctopusInformation \"Exiting with an error code of 1 because we reached the timeout\"\n        exit 1\n    }\n}\n\nfunction Get-ChildDeploymentSpecificMachines\n{\n    param (\n        $deploymentPreview,\n        $deploymentMachines,\n        $specificMachineDeployment\n    )\n\n    if ($specificMachineDeployment -eq $false)\n    {\n        return @()\n    }\n\n    $filteredList = @()\n    $deploymentMachineList = $deploymentMachines -split \",\"\n    foreach ($deploymentMachine in $deploymentMachineList)\n    {\n        foreach ($step in $deploymentPreview.StepsToExecute)\n        {\n            foreach ($machine in $step.Machines)\n            {\n                if ($deploymentMachine -eq $machine.Id -and $filteredList -notcontains $machine.Id)\n                {\n                    $filteredList += $machine.Id\n                }\n            }\n        }\n    }\n\n    return $filteredList\n}\n\nfunction Test-ChildProjectDeploymentCanProceed\n{\n\tparam (\n    \t$releaseToPromote,\n        $allowRedeployToTargetEnvironment,\n        $specificMachineDeployment,                \n        $releaseNumber,\n        $environmentName,\n        $childDeploymentSpecificMachines,\n        $project,\n        $ignoreSpecificMachineMismatch,\n        $deploymentMachines\n    )\n\n\tWrite-OctopusInformation \"Checking to see if $($releaseToPromote.Release.Id) exists in $($releaseToPromote.ReleaseAlreadyDeployedToTargetEnvironment)\"\n    \n\tif ($releaseToPromote.ReleaseAlreadyDeployedToTargetEnvironment -contains $releaseToPromote.Release.Id -and $allowRedeployToTargetEnvironment -eq $false)\n    {\t     \t \n    \tWrite-OctopusSuccess \"Release $($releaseToPromote.Release.Version) has already has been deployed to $environmentName.  Redeployments set to no, exiting.\"\n        \n        if ($specificMachineDeployment -eq $true -and $childDeploymentSpecificMachines.Length -gt 0)\n        {\n            Write-OctopusSuccess \"$($project.Name) can deploy to $childDeploymentSpecificMachines but redeployments are not allowed.  You can overwrite that behavior by setting the parameter Force Redeployment to \"\"When deploying to specific machines\"\".\"\n        }\n        \n        Insert-EmptyOutputVariables -releaseToPromote $releaseToPromote\n\n        exit 0\n    }\n    \n    if ($childDeploymentSpecificMachines.Length -le 0 -and $specificMachineDeployment -eq $true -and $ignoreSpecificMachineMismatch -eq $false)\n    {\n        Write-OctopusSuccess \"$($project.Name) does not deploy to $($deploymentMachines -replace \",\", \" OR \").  The value for \"\"Ignore specific machine mismatch\"\" is set to \"\"No\"\".  Skipping this project.\"\n        \n        Insert-EmptyOutputVariables -releaseToPromote $releaseToPromote\n        \n        Exit 0\n    }\n}\n\nfunction Get-ParentDeploymentApprovers\n{\n    param (\n        $parentDeploymentTaskId,\n        $spaceId,\n        $defaultUrl,\n        $octopusApiKey\n    )\n\n    Write-OctopusInformation \"Getting all the events from the parent project\"\n    $parentDeploymentEvents = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"events?regardingAny=$parentDeploymentTaskId&spaces=$spaceId&includeSystem=true\" -apiKey $octopusApiKey -method \"GET\"\n\n    $approverList = @()\n    foreach ($parentDeploymentEvent in $parentDeploymentEvents.Items)\n    {\n        Write-OctopusVerbose \"Checking $($parentDeploymentEvent.Message) for manual intervention\"\n        if ($parentDeploymentEvent.Message -like \"Submitted interruption*\")\n        {\n            Write-OctopusVerbose \"The event $($parentDeploymentEvent.Id) is a manual intervention approval event which was approved by $($parentDeploymentEvent.Username).\"\n\n            $approverExists = $approverList | Where-Object {$_.Id -eq $parentDeploymentEvent.UserId}        \n\n            if ($null -eq $approverExists)\n            {\n                $approverInformation = @{\n                    Id = $parentDeploymentEvent.UserId;\n                    Username = $parentDeploymentEvent.Username;\n                    Teams = @()\n                }\n\n                $approverInformation.Teams = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"teammembership?userId=$($approverInformation.Id)&spaces=$spaceId&includeSystem=true\" -apiKey $octopusApiKey -method \"GET\"            \n\n                Write-OctopusVerbose \"Adding $($approverInformation.Id) to the approval list\"\n                $approverList += $approverInformation\n            }        \n        }\n    }\n\n    return $approverList\n}\n\nfunction Submit-ChildProjectDeploymentForAutoApproval\n{\n    param (\n        $createdDeployment,\n        $parentDeploymentApprovers,\n        $defaultUrl,\n        $octopusApiKey,\n        $spaceId,\n        $parentProjectName,\n        $parentReleaseNumber,\n        $parentEnvironmentName,\n        $parentDeploymentTaskId,\n        $parentProjectSlug,\n        $parentDeploymentId\n    )\n\n    Write-OctopusSuccess \"The task has a pending manual intervention.  Checking parent approvals.\"\n    Write-OctopusVerbose \"Parent Deployment Id: $parentDeploymentId\"\n    $manualInterventionInformation = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions?regarding=$($createdDeployment.TaskId)\" -method \"GET\" -apiKey $octopusApiKey -spaceId $spaceId\n    foreach ($manualIntervention in $manualInterventionInformation.Items)\n    {\n        if ($manualIntervention.IsPending -eq $false)\n        {\n            Write-OctopusInformation \"This manual intervention has already been approved.  Proceeding onto the next one.\"\n            continue\n        }\n\n        if ($manualIntervention.CanTakeResponsibility -eq $false)\n        {\n            Write-OctopusSuccess \"The user associated with the API key doesn't have permissions to take responsibility for the manual intervention.\"\n            Write-OctopusSuccess \"If you wish to leverage the auto-approval functionality give the user permissions.\"\n            continue\n        }        \n\n        $automaticApprover = $null\n        Write-OctopusVerbose \"Checking to see if one of the parent project approvers is assigned to one of the manual intervention teams $($manualIntervention.ResponsibleTeamIds)\"\n        foreach ($approver in $parentDeploymentApprovers)\n        {\n            foreach ($approverTeam in $approver.Teams)\n            {\n                Write-OctopusVerbose \"Checking to see if $($manualIntervention.ResponsibleTeamIds) contains $($approverTeam.TeamId)\"\n                if ($manualIntervention.ResponsibleTeamIds -contains $approverTeam.TeamId)\n                {\n                    $automaticApprover = $approver\n                    break\n                }\n            }\n\n            if ($null -ne $automaticApprover)\n            {\n                break\n            }\n        }\n\n        if ($null -ne $automaticApprover)\n        {\n            if ($manualIntervention.HasResponsibility -eq $false)\n            {\n                Write-OctopusInformation \"Taking over responsibility for this manual intervention.\"\n                $takeResponsiblilityResponse = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions/$($manualIntervention.Id)/responsible\" -method \"PUT\" -apiKey $octopusApiKey -spaceId $spaceId\n                Write-OctopusVerbose \"Response from taking responsibility $($takeResponsiblilityResponse.Id)\"\n            }\n            \n            $submitApprovalBody = @{\n                Instructions = $null;\n                Notes = \"Auto-approving this deployment.  Parent project $parentProjectName release $parentReleaseNumber to $parentEnvironmentName with the task id $parentDeploymentTaskId was approved by $($automaticApprover.UserName).  That user is a member of one of the teams this manual intervention requires.  You can view that deployment $defaultUrl/app#/$spaceId/projects/$parentProjectSlug/deployments/releases/$parentReleaseNumber/deployments/$($parentDeploymentId)?activeTab=taskSummary\";\n                Result = \"Proceed\"\n            }\n            $submitResult = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"interruptions/$($manualIntervention.Id)/submit\" -method \"POST\" -apiKey $octopusApiKey -item $submitApprovalBody -spaceId $spaceId\n            Write-OctopusInformation \"Successfully auto approved the manual intervention $($submitResult.Id)\"\n        }\n        else\n        {\n            Write-OctopusSuccess \"Couldn't find an approver to auto-approve the child project.  Waiting until timeout or child project is approved.\"    \n        }\n    }\n}\n\nfunction Get-ReleaseNotes\n{\n\tparam (\n    \t$releaseToPromote,\n        $deploymentPreview,\n        $channel,\n        $spaceId,\n        $defaultUrl,\n        $octopusApiKey\n    )\n            \n    $releaseNotes = @(\"\")\n    $releaseNotes += \"**Release Information**\"\n    $releaseNotes += \"\"\n\n    $packageVersionAdded = @()\n    $workItemsAdded = @()\n    $commitsAdded = @()\n\n    if ($null -ne $releaseToPromote.BuildInformation -and $releaseToPromote.BuildInformation -gt 0)\n    {\n        $releaseNotes += \"- Package Versions\"\n        foreach ($change in $deploymentPreview.Changes)\n        {        \n            foreach ($package in $change.BuildInformation)\n            {\n                $packageInformation = \"$($package.PackageId).$($package.Version)\"\n                if ($packageVersionAdded -notcontains $packageInformation)\n                {\n                    $releaseNotes += \"  - $packageInformation\"\n                    $packageVersionAdded += $packageInformation\n                }\n            }\n        }\n\n\t\t$releaseNotes += \"\"\n        $releaseNotes += \"- Work Items\"\n        foreach ($change in $deploymentPreview.Changes)\n        {        \n            foreach ($workItem in $change.WorkItems)\n            {            \n                if ($workItemsAdded -notcontains $workItem.Id)\n                {\n                    $workItemInformation = \"[$($workItem.Id)]($($workItem.LinkUrl)) - $($workItem.Description)\"\n                    $releaseNotes += \"  - $workItemInformation\"\n                    $workItemsAdded += $workItem.Id\n                }\n            }\n        }\n\n\t\t$releaseNotes += \"\"\n        $releaseNotes += \"- Commits\"\n        foreach ($change in $deploymentPreview.Changes)\n        {        \n            foreach ($commit in $change.Commits)\n            {            \n                if ($commitsAdded -notcontains $commit.Id)\n                {\n                    $commitInformation = \"[$($commit.Id)]($($commit.LinkUrl)) - $($commit.Comment)\"\n                    $releaseNotes += \"  - $commitInformation\"\n                    $commitsAdded += $commit.Id\n                }\n            }\n        }            \n    }\n    else\n    {\n        $releaseNotes += $releaseToPromote.Release.ReleaseNotes\n        $releaseNotes += \"\"\n        $releaseNotes += \"Package Versions\"  \n        \n        $releaseDeploymentTemplate = $submitResult = Invoke-OctopusApi -octopusUrl $DefaultUrl -endPoint \"deploymentprocesses/$($releaseToPromote.Release.ProjectDeploymentProcessSnapshotId)/template?channel=$($channel.Id)&releaseId=$($releaseToPromote.Release.Id)\" -method \"GET\" -apiKey $octopusApiKey -spaceId $spaceId\n        \n        foreach ($package in $releaseToPromote.Release.SelectedPackages)\n        {\n        \tWrite-OctopusVerbose \"Attempting to find $($package.StepName) and $($package.ActionName)\"\n            \n            $deploymentProcessPackageInformation = $releaseDeploymentTemplate.Packages | Where-Object {$_.StepName -eq $package.StepName -and $_.actionName -eq $package.ActionName}\n            if ($null -ne $deploymentProcessPackageInformation)\n            {\n                $packageInformation = \"$($deploymentProcessPackageInformation.PackageId).$($package.Version)\"\n                if ($packageVersionAdded -notcontains $packageInformation)\n                {\n                    $releaseNotes += \"  - $packageInformation\"\n                    $packageVersionAdded += $packageInformation\n                }\n            }\n        }\n    }\n\n    return $releaseNotes -join \"`n\"\n}\n\nfunction Get-QueueDate\n{\n\tparam ( \n    \t$futureDeploymentDate\n    )\n    \n    if ([string]::IsNullOrWhiteSpace($futureDeploymentDate) -or $futureDeploymentDate -eq \"N/A\")\n    {\n    \treturn $null\n    }\n    \n    [datetime]$outputDate = New-Object DateTime\n    $currentDate = Get-Date\n\n    if ([datetime]::TryParse($futureDeploymentDate, [ref]$outputDate) -eq $false)\n    {\n        Write-OctopusCritical \"The suppplied date $futureDeploymentDate cannot be parsed by DateTime.TryParse.  Please verify format and try again.  Please [refer to Microsoft's Documentation](https://docs.microsoft.com/en-us/dotnet/api/system.datetime.tryparse) on supported formats.\"\n        exit 1\n    }\n    \n    if ($currentDate -gt $outputDate)\n    {\n    \tWrite-OctopusCritical \"The supplied date $futureDeploymentDate is set for the past.  All queued deployments must be in the future.\"\n        exit 1\n    }\n    \n    return $outputDate\n}\n\nfunction Get-QueueExpiryDate\n{\n\tparam (\n    \t$queueDate\n    )\n    \n    if ($null -eq $queueDate)\n    {\n    \treturn $null\n    }\n    \n    return $queueDate.AddHours(1)\n}\n\nfunction Insert-EmptyOutputVariables\n{\n\tparam (\n    \t$releaseToPromote\n    )\n    \n\tif ($null -ne $releaseToPromote -and $null -ne $releaseToPromote.Release)\n    {\n\t\tSet-OctopusVariable -Name \"ReleaseToPromote\" -Value $($releaseToPromote.Release.Version)\n    }\n    else\n    {\n    \tSet-OctopusVariable -Name \"ReleaseToPromote\" -Value \"N/A\"\n    }\n    \n    Set-OctopusVariable -Name \"ReleaseNotes\" -value \"No release found\"\n}\n\nWrite-OctopusInformation \"Project Name: $projectName\"\nWrite-OctopusInformation \"Channel Name: $ChannelName\"\nWrite-OctopusInformation \"Release Number: $releaseNumber\"\nWrite-OctopusInformation \"Destination Environment Name: $environmentName\"\nWrite-OctopusInformation \"Source Environment Name: $sourceEnvironmentName\"\nWrite-OctopusInformation \"SpaceId: $destinationSpaceId\"\nWrite-OctopusInformation \"deploymentTenantId: $deploymentTenantId\"\nWrite-OctopusInformation \"Allow Redeployment: $allowRedeployToTargetEnvironmentValue\"\nWrite-OctopusInformation \"What If: $whatIfValue\"\nWrite-OctopusInformation \"Wait for deployment: $waitForFinishValue\"\nWrite-OctopusInformation \"Cancel deployment in seconds: $deploymentCancelInSeconds\"\nWrite-OctopusInformation \"Ignore specific machine mismatch: $ignoreSpecificMachineMismatchValue\"\nWrite-OctopusInformation \"Parent Deployment Task Id: $parentDeploymentTaskId\"\nWrite-OctopusInformation \"Parent Project Name: $parentProjectName\"\nWrite-OctopusInformation \"Parent Release Number: $parentReleaseNumber\"\nWrite-OctopusInformation \"Parent Environment Name: $parentEnvironmentName\"\nWrite-OctopusInformation \"Parent Deployment Id: $parentDeploymentId\"\nWrite-OctopusInformation \"Parent Project Slug: $parentProjectSlug\"\nWrite-OctopusInformation \"Can use parent project approvals for child project: $autoapproveChildManualInterventionsValue\"\nWrite-OctopusInformation \"Save release notes as artifact: $saveReleaseNotesAsArtifactValue\"\nWrite-OctopusInformation \"Future Deployment Date: $futureDeploymentDate\"\nWrite-OctopusInformation \"Destination Space Name: $destinationSpaceName\"\nWrite-OctopusInformation \"Error Handle No Release Found: $errorHandleForNoRelease\"\n\n$whatIf = $whatIfValue -eq \"Yes\"\n$allowRedeployToTargetEnvironment = $allowRedeployToTargetEnvironmentValue -eq \"Yes\"\n$waitForFinish = $waitForFinishValue -eq \"Yes\"\n$ignoreSpecificMachineMismatch = $ignoreSpecificMachineMismatchValue -eq \"Yes\"\n$autoapproveChildManualInterventions = $autoapproveChildManualInterventionsValue -eq \"Yes\"\n$saveReleaseNotesAsArtifact = $saveReleaseNotesAsArtifactValue -eq \"Yes\"\n\n$specificMachineDeployment = $false\nif ([string]::IsNullOrWhiteSpace($specificMachines) -eq $false)\n{\n\tWrite-OctopusSuccess \"This deployment is targeting the specific machines $specificMachines.\"\n\t$specificMachineDeployment = $true\n}\n\nif ([string]::IsNullOrWhiteSpace($excludeMachines) -eq $false)\n{\n\tWrite-OctopusSuccess \"This deployment is excluding the specific machines $excludeMachines.  The machines being deployed to are: $deploymentMachines.\"\n    $specificMachineDeployment = $true\n}\n\nif ($specificMachineDeployment -eq $true -and $allowRedeployToTargetEnvironment -eq $false -and $allowRedeployToTargetEnvironmentValue -eq \"SpecificMachines\")\n{\n\tWrite-OctopusSuccess \"The parameter Force Redeployment was set to allow redeployment when deploying to specific machines.\"\n\t$allowRedeployToTargetEnvironment = $true\n}\n\n$spaceId = Get-OctopusSpaceId -spaceName $destinationSpaceName -spaceId $destinationSpaceId -defaultUrl $defaultUrl -OctopusApiKey $octopusApiKey    \n$project = Get-OctopusProject -projectName $projectName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$tenantToDeploy = Get-OctopusTenant -deploymentTenantId $deploymentTenantId -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$targetEnvironment = Get-OctopusEnvironment -environmentName $environmentName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n\nTest-ProjectTenantSettings -tenantToDeploy $tenantToDeploy -project $project -targetEnvironment $targetEnvironment\n\n$sourceEnvironment = Get-OctopusEnvironment -environmentName $sourceEnvironmentName -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$channel = Get-OctopusChannel -channelName $ChannelName -defaultUrl $DefaultUrl -project $project -spaceId $spaceId -octopusApiKey $octopusApiKey\n$lifecycle = Get-OctopusLifecycle -channel $channel -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$phaseList = Get-LifecyclePhases -lifecycle $lifecycle -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey\n$previousPhase = Get-PreviousPhase -phaseList $phaseList -targetEnvironment $targetEnvironment -sourceEnvironment $sourceEnvironment\n$targetPhase = Get-DestinationPhase -phaseList $phaseList -targetEnvironment $targetEnvironment\n\n$releaseToPromote = Get-ReleaseToPromote -channel $channel -releaseNumber $releaseNumber -environmentName $environmentName -targetPhase $targetPhase -previousPhase $previousPhase -defaultUrl $defaultUrl -spaceId $spaceid -octopusApiKey $octopusApiKey -errorHandleForNoRelease $errorHandleForNoRelease\n\n$deploymentPreview = Get-DeploymentPreview -releaseToPromote $releaseToPromote -defaultUrl $DefaultUrl -spaceId $spaceId -octopusApiKey $octopusApiKey -targetEnvironment $targetEnvironment -deploymentTenant $tenantToDeploy\n$childDeploymentSpecificMachines = Get-ChildDeploymentSpecificMachines -deploymentPreview $deploymentPreview -deploymentMachines $deploymentMachines -specificMachineDeployment $specificMachineDeployment\n$deploymentFormValues = Get-ValuesForPromptedVariables -formValues $formValues -deploymentPreview $deploymentPreview\n\nif ($null -eq $previousPhase)\n{\n\tWrite-OctopusSuccess \"We are in the first phase for $($channel.Name)'s lifecycle.  The latest created release matching release number $releaseNumber is $($releaseToPromote.Release.Version).\"\n}\nelse\n{\n\tWrite-OctopusSuccess \"Release $($releaseToPromote.Release.Version) is the most recent release deployed to the previous phase $($previousPhase.Name).\"\n}\n\n$queueDate = Get-QueueDate -futureDeploymentDate $futureDeploymentDate\n$queueExpiryDate = Get-QueueExpiryDate -queueDate $queueDate\n\n$createdRelease = @{\n    EnvironmentId = $targetEnvironment.Id;\n    ExcludeMachineIds = @();\n    ForcePackageDownload = $false;\n    ForcePackageRedeployment = $false;\n    FormValues = $deploymentFormValues;\n    QueueTime = $queueDate;\n    QueueTimeExpiry = $queueExpiryDate;\n    ReleaseId = $releaseToPromote.Release.Id;\n    SkipActions = @();\n    SpecificMachineIds = @($childDeploymentSpecificMachines);\n    TenantId = $null;\n    UseGuidedFailure = $false\n}\n\nif ([string]::IsNullOrWhiteSpace($deploymentTenantId) -eq $false -and $project.TenantedDeploymentMode -ne \"Untenanted\")\n{\n    $createdRelease.TenantId = $deploymentTenantId\n}\n\nif ($whatIf -eq $true)\n{    \t\n    Write-OctopusVerbose \"Would have done a POST to /api/$spaceId/deployments with the body:\"\n    Write-OctopusVerbose $($createdRelease | ConvertTo-JSON)        \n    \n    Write-OctopusSuccess \"What If set to true.\"\n    Write-OctopusSuccess \"Setting the output variable ReleaseToPromote to $($releaseToPromote.Release.Version).\"            \n\tSet-OctopusVariable -Name \"ReleaseToPromote\" -Value ($releaseToPromote.Release.Version)       \n}\n\nWrite-OctopusVerbose \"Getting the release notes\"\n$releaseNotes = Get-ReleaseNotes -releaseToPromote $releaseToPromote -deploymentPreview $deploymentPreview -channel $channel -spaceId $spaceId -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey\nWrite-OctopusSuccess \"Setting the output variable ReleaseNotes which contains the release notes from the child project\"\nSet-OctopusVariable -Name \"ReleaseNotes\" -value $releaseNotes\n\nTest-ChildProjectDeploymentCanProceed -releaseToPromote $releaseToPromote -allowRedeployToTargetEnvironment $allowRedeployToTargetEnvironment -specificMachineDeployment $specificMachineDeployment -releaseNumber $releaseNumber -environmentName $environmentName -childDeploymentSpecificMachines $childDeploymentSpecificMachines -project $project -ignoreSpecificMachineMismatch $ignoreSpecificMachineMismatch -deploymentMachines $deploymentMachines\n\nif ($saveReleaseNotesAsArtifact -eq $true)\n{\n\t$releaseNotes | Out-File \"ReleaseNotes.txt\"\n    $currentDate = Get-Date\n\t$currentDateFormatted = $currentDate.ToString(\"yyyy_MM_dd_HH_mm\")\n    $artifactName = \"$($project.Name) $($releaseToPromote.Release.Version) From $($previousPhase.Name) To $($targetPhase.Name).ReleaseNotes_$($currentDateFormatted).txt\"\n    Write-OctopusInformation \"Creating the artifact $artifactName\"\n    \n\tNew-OctopusArtifact -Path \"ReleaseNotes.txt\" -Name $artifactName\n}\n\nif ($whatif -eq $true)\n{\n\tWrite-OctopusSuccess \"Exiting because What If set to true.\"\n    Exit 0\n}\n\n$parentDeploymentApprovers = Get-ParentDeploymentApprovers -parentDeploymentTaskId $parentDeploymentTaskId -spaceId $spaceId -defaultUrl $DefaultUrl -octopusApiKey $octopusApiKey\n\nCreate-NewOctopusDeployment -releaseToPromote $releaseToPromote -targetEnvironment $targetEnvironment -createdRelease $createdRelease -project $project -waitForFinish $waitForFinish -deploymentCancelInSeconds $deploymentCancelInSeconds -defaultUrl $defaultUrl -octopusApiKey $octopusApiKey -spaceId $spaceId -parentDeploymentApprovers $parentDeploymentApprovers -parentProjectName $parentProjectName -parentReleaseNumber $parentReleaseNumber -parentEnvironmentName $parentEnvironmentName -parentDeploymentTaskId $parentDeploymentTaskId -parentProjectSlug $parentProjectSlug -parentDeploymentId $parentDeploymentId -autoapproveChildManualInterventions $autoapproveChildManualInterventions\n\n\n"
    },
    "Parameters": [
      {
        "Id": "f7357d18-33c3-4f1e-883d-613e13e098cd",
        "Name": "ChildProject.Api.Key",
        "Label": "Octopus API Key",
        "HelpText": "*Required* \n\n\nThe API key of the user authorized to query and promote releases.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "e3337365-c83f-4f73-a7d0-c3f36469a70d",
        "Name": "ChildProject.Space.Name",
        "Label": "Child Project Space",
        "HelpText": "The name of the space the child project is located in.  Defaults to the current space name",
        "DefaultValue": "#{Octopus.Space.Name}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "d9afe2db-720a-40d0-928e-6d1763286fc9",
        "Name": "ChildProject.Project.Name",
        "Label": "Child Project Name",
        "HelpText": "*Required* \n\n\nThe name of the child project you wish to deploy.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "789a658e-ee7f-4bf2-aaa3-cf1a998adf57",
        "Name": "ChildProject.Channel.Name",
        "Label": "Child Project Channel",
        "HelpText": "*Optional* \n\n\nThe name of the channel in the child project tied to the release you wish to deploy.  If left blank it will look at the project's default channel.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "dfe2c259-11c4-491f-900a-db7c37d82836",
        "Name": "ChildProject.Release.Number",
        "Label": "Child Project Release Number",
        "HelpText": "*Optional* \n\n\nThe release number to filter on.  This field accepts:\n- *No value (default)* - the most recent release for the channel in the calculated previous environment or specified previous environment\n- *Wild card* - Example: `2020.2.*` will find the most recent release with a major version of 2020 and a minor version of 2.  Please note the period is important, if you enter `2020.1*` you could end up with 2020.10 releases.\n- *Specific version* - Example: `2020.2.1.2` will deploy that specific version.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "c64e9163-ce84-4f56-8509-af849262a9be",
        "Name": "ChildProject.Release.NotFoundError",
        "Label": "Child Project Release Not Found Error Handle",
        "HelpText": "What this step should do when a matching release cannot be found.\n\n- `Error` - Stops the deployment when no matching release is found.  For example, you specified `2021.1.2.*`, but there is no release in the child project matching that pattern.  Or, matching releases have been found but they cannot be promoted to the destination environment.\n- `Warning` - Stops this step with a warning.  The rest of the deployment continues.\n- `Skip` - Stops this with no error or warning. Logs an information message.  The rest of the deployment continues.\n\nThe default is `Warning`.",
        "DefaultValue": "Warning",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Error|Error\nWarning|Warning\nSkip|Skip"
        }
      },
      {
        "Id": "04b2e549-888f-4a10-811c-f325690b3a80",
        "Name": "ChildProject.Destination.EnvironmentName",
        "Label": "Destination Environment Name",
        "HelpText": "The name of the destination environment.  \n\nExamples: `Development`, `Test`, or `Production`\n\n\nThe parent project and child project do *NOT* have to have the same lifecycle.  The only requirement is all the previous phases' requirements in the child project must be met.  For example, if the child project's life cycle is Dev->Test->Staging->Prod and the parent project lifecycle is Staging->Prod and you wish to deploy to staging, then the child project's release must go through Dev and Test first.",
        "DefaultValue": "#{Octopus.Environment.Name}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "e439fdb3-0697-4ea1-8b2c-8e343bfaa5af",
        "Name": "ChildProject.SourceEnvironment.Name",
        "Label": "Source Environment Name",
        "HelpText": "*Optional* \n\n\nThe name of the source environment.  When blank the source environment will be calculated using the channel's lifecycle.  \n\n\nExamples: `Development`, `Test`, or `Production`\n\n\n**Please Note:** The most recently created release will be selected when the destination environment is the first phase of the child project's lifecycle.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "4f9b232a-43ce-484c-9b30-0d3b195ddb15",
        "Name": "ChildProject.Prompted.Variables",
        "Label": "Child Project Prompted Variables",
        "HelpText": "*Optional*\n\n\nValues for any prompted variables for the release. Each new line represents a new variable. This will only work with string variable types, text, and sensitive values.\n\n\nUse the format Name::Value \n\n\nFor example:\n\n\n```\nPromptedVariableName::My Super Awesome Value\nOtherPromptedVariable::Other Super Awesome Value\n```",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "MultiLineText"
        }
      },
      {
        "Id": "f363d44b-b51c-4404-ac68-495561856726",
        "Name": "ChildProject.ForceRedeployment.Value",
        "Label": "Force Redeployment",
        "HelpText": "Options:\n\n- `Yes` - force redeployment of the release to the destination environment\n- `No` - don't redeploy the release if it has already been pushed to the destination environment\n- `When deploying to specific machines` - Will redeploy the release to the destination environment if the parent project deployment targets specific machines, or excludes specific machines.  The child project deployment will only target the specific machines from the parent project.  For example, when a deployment is caused by a trigger.\n\nRecommend using prompted variables with the default value set to `No` to set this value.  The options are `Yes` and `No`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No\nSpecificMachines|When deploying to specific machines"
        }
      },
      {
        "Id": "02805228-fde7-4c1d-853f-acad7e819ba3",
        "Name": "ChildProject.Deployment.IgnoreSpecificMachineMismatch",
        "Label": "Ignore specific machine mismatch",
        "HelpText": "When the parent project is deploying to specific machines and the child project isn't associated with those machines the step will ignore it.  \n\nExamples:\n- A deployment target trigger fires for a newly created machine.  Only 1 out of 5 child projects deploy to that newly created machine's roles.\n- A redeployment needs to occur, but only for a specific machine.  Only 2 out of the 4 child projects deploy to that specific machine's roles.    \n\nIn both those examples, the default behavior of this step template is to skip those child projects not tied to the machine's roles.  When the child project is invoked, the specific matching machines will be sent to the child project.\n\nSet to `Yes` to ignore the difference.  Default is `No`.  Warning, setting to `Yes` could result in a failed deployment.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      },
      {
        "Id": "aefc5d01-907c-47f6-a1d6-efaf97eefb6c",
        "Name": "ChildProject.ReleaseNotes.SaveAsArtifact",
        "Label": "Save release notes as artifact",
        "HelpText": "This step will pull the release notes (or build information) from the child project and will save it to the output variable `ReleaseNotes`.\n\nThis option allows you to save those release notes as an artifact.  The default is `No`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      },
      {
        "Id": "563136dd-b848-49f8-b9ef-57acc879dbc2",
        "Name": "ChildProject.WhatIf.Value",
        "Label": "What If",
        "HelpText": "By default, this step will trigger a deployment.\n\n\nSetting this value to Yes will perform all the work up to triggering the deployment.  This is useful for approval steps, you can run this step (or set of steps) to get the list of child releases to deploy, and then verify them via a manual intervention.\n\n\nWhen this is set to `Yes` it will set an output variable `ReleaseToPromote`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No"
        }
      },
      {
        "Id": "d1d42293-e6fc-425e-a81c-973cc81eaa1d",
        "Name": "ChildProject.WaitForFinish.Value",
        "Label": "Wait for finish",
        "HelpText": "Set to `Yes` to avoid waiting for the deployment to finish.  Will only be used when *What If* is set to `No`.",
        "DefaultValue": "Yes",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Yes|Yes\nNo|No"
        }
      },
      {
        "Id": "fd04d6fc-cc78-4a4f-9373-e48c349c9b07",
        "Name": "ChildProject.CancelDeployment.Seconds",
        "Label": "Wait for Deployment",
        "HelpText": "Amount of time, in seconds, to wait for the deployment to finish.  Default is 1800 seconds, or 30 minutes.",
        "DefaultValue": "1800",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "7c3e75d3-a91c-47a1-acaa-1c6ea9f0699d",
        "Name": "ChildProject.Deployment.FutureTime",
        "Label": "Scheduling",
        "HelpText": "**Optional**\n\nSchedule the deployment for the future.  Please note, if this is set, the `Wait for Deployment` option is ignored.\n\nUses `DateTime.TryParse` to determine the value sent in.  Supported formats:\n\n- `7:00 PM` will deploy at 7:00 PM today\n- `21:00` will deploy at 21:00 hours or 9 PM today\n- `YYYY-MM-DD HH:mm:ss` or `2021-01-14 21:00:00` will deploy at 9 PM on the 14th of January, 2021\n- `YYYY/MM/DD HH:mm:ss` or `2021/03/20 22:00:00` will deploy at 10 PM on the 20th of March, 2021\n- `MM/DD/YYYY HH:mm:ss` or `06/25/2021 19:00:00` will deploy at 7 PM on the 25th of June, 2021\n- `DD MMM YYYY HH:mm:ss` or `01 Jan 2021 18:00:00` will deploy at 6 PM on the 1st of January, 2021\n\nUses the Octopus Server's Timezone.  The queue expiry time will be set to 1 hour from the supplied date.\n\nDefault is `N/A` or not applicable.  ",
        "DefaultValue": "N/A",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "5789f25c-6efb-4bbc-9236-2939faf7c553",
        "Name": "ChildProject.ManualInterventions.UseApprovalsFromParent",
        "Label": "Use manual intervention approvals in child project",
        "HelpText": "If the child project has manual interventions the step will look for manual interventions in the parent project.\n\nWhen a manual intervention in the parent project is found it will check that user's assigned teams.  If that user's assigned teams can approve the child project it will do so.\n\nPlease note, the user associated with the API key must be able to approve the child project manual interventions as well.  \n\nThe default is `Yes`, allow this to happen.  Set it to `No` to skip this functionality.",
        "DefaultValue": "Yes",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      }
    ],
    "$Meta": {
      "ExportedAt": "2021-01-14T20:45:39.981Z",
      "OctopusVersion": "2020.5.1",
      "Type": "ActionTemplate"
    },
    "LastModifiedBy": "octopusbob",
    "Category": "octopus"
  }