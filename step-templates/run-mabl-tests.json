{
    "Id": "422be361-640c-4ac1-a305-cd5d618ccf10",
    "Name": "Run mabl tests",
    "Description": "Execute mabl tests in your environment.",
    "ActionType": "Octopus.Script",
    "Version": 1,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "param(\n    [string]$apiKey,\n    [string]$envId,\n    [string]$appId,\n    [string]$planLabels\n) \n\n$ErrorActionPreference = \"Stop\" \n\n# Constants\n$PollSec = 10\n$UserAgent = \"mabl-octopus-plugin/0.0.1\"\n$ApiBase = \"https://api.mabl.com\"\n$DeploymentEventsUri = \"$ApiBase/events/deployment\"\n$ExecutionResultBaseUri = \"$ApiBase/execution/result/event\"\n\nfunction Get-Param($Name, [switch]$Required, $MatchingPattern, $Explanation) {\n    $result = $null\n\n    if ($null -ne $OctopusParameters) {\n        $result = $OctopusParameters[$Name]\n    }\n\n    if ($null -eq $result) {\n        $variable = Get-Variable $Name -EA SilentlyContinue   \n        if ($null -ne $variable) {\n            $result = $variable.Value\n        }\n    }\n\n    if ($null -eq $result -or $result -eq \"\") {\n        if ($Required) {\n            throw \"Missing parameter value $Name\"\n        }\n    }\n\n    if ($null -ne $result -and $null -ne $MatchingPattern -and $result -notmatch $MatchingPattern) {\n        throw \"$Explanation\"\n    }\n\n    return $result\n}\n\n\n& {\n    param (\n        [string]$apiKey,\n        [string]$envId,\n        [string]$appId,\n        [string]$planLabels\n    )\n\n    $kv = \"key:$($apiKey)\"\n    $encodedCreds = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes($kv))\n    $basicAuthValue = \"Basic $encodedCreds\"\n    $headers = @{\n        Authorization = $basicAuthValue\n        accept        = \"application/json\"\n    }\n\n    # Submit Deployment Event\n    $resp = \"\"\n    try {\n        $m = @{}\n        if ($null -ne $envId -and \"\" -ne $envId) {\n            $m.add(\"environment_id\", $envId)\n        }\n        if ($null -ne $appId -and \"\" -ne $appId) {\n            $m.add(\"application_id\", $appId)\n        }\n        if ($null -ne $planLabels -and \"\" -ne $planLabels) {\n            $planOverrides = @{}\n            $planLabelArray = $planLabels.Split(\",\")\n            $planOverrides.add(\"plan_labels\", $planLabelArray)\n            $m.add(\"plan_overrides\", $planOverrides)\n        }\n        $body = ConvertTo-Json -InputObject $m\n        $resp = Invoke-RestMethod -URI $DeploymentEventsUri -Method Post `\n            -Headers $headers -ContentType 'application/json' `\n            -UserAgent $UserAgent -Body $body\n\n        Write-Host \"Successfully submitted deployment event\"\n    }\n    catch {\n        $statusCode = $_.Exception.Response.StatusCode.value__\n    \n        Write-Host \"Failed to invoke deployment events API, status code: \" `\n            $statusCode \" description: \" `\n            $_.Exception.Response.StatusDescription\n    \n        switch ($statusCode) {\n            400 {\n                Write-Host \"At least one of environment ID or application ID must be specified\"\n                break\n            }\n            401 { \n                Write-Host \"Invalid API key has been provided\"\n                break\n            }\n            403 {\n                Write-Host \"The provided API key is not authorized to submit deployment events\"\n                break\n            }\n            404 {\n                Write-Host \"The provided application or environment could not be found\"\n                break\n            }\n        }\n        exit 1\n    }\n\n    # Poll Execution Result Until All Tests Complete\n    $totalPlans = 0\n    $passedPlans = 0\n    $failedPlans = 0\n    $totalTests = 0\n    $passedTests = 0\n    $failedTests = 0\n    $execResult = \"\"\n    try {\n        $complete = $FALSE\n        do {\n            Start-Sleep -s $PollSec\n            $eventId = $resp.id\n            $uri = \"$ExecutionResultBaseUri/$eventId\"\n            $execResult = Invoke-RestMethod -URI $uri -Method Get -Headers $headers\n            $totalPlans = $execResult.plan_execution_metrics.total\n            $passedPlans = $execResult.plan_execution_metrics.passed\n            $failedPlans = $execResult.plan_execution_metrics.failed\n            $totalTests = $execResult.journey_execution_metrics.total\n            $passedTests = $execResult.journey_execution_metrics.passed\n            $failedTests = $execResult.journey_execution_metrics.failed\n            if ($passedPlans + $failedPlans -eq $totalPlans) {\n                $complete = $TRUE\n            }\n            else {\n                Write-Host \"Tests are running\" `\n                    \"[total: $totalTests, passed: $passedTests, failed: $failedTests]\"\n            }\n        } while (!$complete)\n    } \n    catch {\n        $statusCode = $_.Exception.Response.StatusCode.value__\n\n        Write-Host \"Failed to invoke execution result API, status code:\" `\n            $statusCode \" description: `\n                \" $_.Exception.Response.StatusDescription\n    \n        switch ($statusCode) {\n            401 {\n                Write-Host \"Invalid API key has been provided\"\n                break\n            }\n            403 {\n                Write-Host \"The provided API key is not authorized to retrieve execution results\"\n                break\n            }\n            404 {\n                Write-Host \"The deployment event could not be found\"\n                break\n            }\n        }\n    \n        exit 1\n    }\n\n    # Display results\n    Write-Host \"Full Results:\"\n    $jsonResult = ConvertTo-Json -InputObject $execResult\n    Write-Host $jsonResult\n    if ($failedPlans -gt 0) {\n        Write-Host \"$failedPlans out of $totalPlans plans and \" `\n            \"$failedTests out of $totalTests tests have failed.\"\n        exit 1\n    }\n    else {\n        Write-Host \"All plans passed.\"\n        exit 0\n    }\n} `\n(Get-Param 'apiKey' -Required) `\n(Get-Param 'envId' '-e$' 'Environment IDs must end with -e') `\n(Get-Param 'appId' '-a$' 'Application IDs must end with -a') `\n(Get-Param 'planLabels')\n"
    },
    "Parameters": [
      {
        "Id": "f5a9d523-f97e-49a9-b946-0c56e1018345",
        "Name": "apiKey",
        "Label": "mabl Integration Key",
        "HelpText": "(Required) The API key of your workspace. You can find the API key on the Settings/API page.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "364c4c30-0ba3-4eee-9b01-9fb00f718ade",
        "Name": "envId",
        "Label": "Environment ID",
        "HelpText": "(Optional) The environment ID to run the tests in. Note that either an environment ID or an application ID must be provided.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "0bf3fd34-1104-4d29-8677-0d91e78fc483",
        "Name": "appId",
        "Label": "Application ID",
        "HelpText": "(Optional) The application ID to run tests on. Note that either an environment ID or an application ID must be provided.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "549d9ef4-2461-45d4-a8bc-44fb79758b52",
        "Name": "planLabels",
        "Label": "Plan Labels",
        "HelpText": "(Optional) A comma-separated list of plan labels. Plans with any of the labels will be executed.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      }
    ],
    "$Meta": {
      "ExportedAt": "2020-06-21T14:55:38.946Z",
      "OctopusVersion": "2020.2.13",
      "Type": "ActionTemplate"
    },
    "LastModifiedBy": "bertold",
    "Category": "mabl"
  }