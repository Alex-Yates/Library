{
  "Id": "7d18aeb8-5e69-4c91-aca4-0d71022944e8",
  "Name": "Redgate - Deploy from Database Release",
  "Description": "Uses the deployment resources from the 'Redgate - Create Database Release' step to deploy the database changes using Redgate's [SQL Change Automation](http://www.red-gate.com/sca/productpage).\r\n\r\nRequires SQL Change Automation version 3.0.2 or later.\r\n\r\n*Version date: 3rd July, 2018*",
  "ActionType": "Octopus.Script",
  "Version": 9,
  "Properties": {
    "Octopus.Action.Script.ScriptBody": "$DlmAutomationModuleName = \"DLMAutomation\"\r\n$SqlChangeAutomationModuleName = \"SqlChangeAutomation\"\r\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\r\n$env:PSModulePath = \"$LocalModules;$env:PSModulePath\"\r\n\r\nfunction IsScaAvailable\r\n{\r\n    if ((Get-Module $SqlChangeAutomationModuleName) -ne $null) {\r\n        return $true\r\n    }\r\n\r\n    return $false\r\n}\r\n\r\nfunction InstallCorrectSqlChangeAutomation\r\n{\r\n    [CmdletBinding()]\r\n    Param(\r\n        [Parameter(Mandatory = $false)]\r\n        [Version]$requiredVersion\r\n    )\r\n\r\n    CheckRequiredDotNetVersionIsInstalled\r\n\r\n    $moduleName = $SqlChangeAutomationModuleName\r\n\r\n    # this will be null if $requiredVersion is not specified - which is exactly what we want\r\n    $maximumVersion = $requiredVersion\r\n\r\n    if ($requiredVersion) {\r\n        if ($requiredVersion.Revision -eq -1) {\r\n            #If provided with a 3 part version number (the 4th part, revision, == -1), we should allow any value for the revision\r\n            $maximumVersion = [Version]\"$requiredVersion.$([System.Int32]::MaxValue)\"\r\n        }\r\n\r\n        if ($requiredVersion.Major -lt 3) {\r\n            # If the specified version is below V3 then the user is requesting a version of DLMA. We should look for that module name instead\r\n            $moduleName = $DlmAutomationModuleName\r\n        }\r\n    }\r\n\r\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\r\n\r\n    if (!$installedModule) {\r\n        #Either SCA isn't installed at all or $requiredVersion is specified but that version of SCA isn't installed\r\n        Write-Verbose \"$moduleName $requiredVersion not available - attempting to download from gallery\"\r\n        InstallLocalModule -moduleName $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\r\n    }\r\n    elseif (!$requiredVersion) {\r\n        #We've got a version of SCA installed, but $requiredVersion isn't specified so we might be able to upgrade\r\n        $newest = GetHighestInstallableModule $moduleName\r\n        if ($newest -and ($installedModule.Version -lt $newest.Version)) {\r\n            Write-Verbose \"Updating $moduleName to version $($newest.Version)\"\r\n            InstallLocalModule -moduleName $moduleName -minimumVersion $newest.Version\r\n        }\r\n    }\r\n\r\n    # Now we're done with install/upgrade, try to import the highest available module that matches our version requirements\r\n\r\n    # We can't just use -minimumVersion and -maximumVersion arguments on Import-Module because PowerShell 3 doesn't have them,\r\n    # so we have to find the precise matching installed version using our code, then import that specifically. Note that\r\n    # $requiredVersion and $maximumVersion might be null when there's no specific version we need.\r\n    $installedModule = GetHighestInstalledModule $moduleName -minimumVersion $requiredVersion -maximumVersion $maximumVersion\r\n\r\n    if (!$installedModule -and !$requiredVersion) {\r\n        #Did not find SCA, and we don't have a required version so we might be able to use an installed DLMA instead.\r\n        Write-Verbose \"$moduleName is not installed - trying to fall back to $DlmAutomationModuleName\"\r\n        $installedModule = GetHighestInstalledModule $DlmAutomationModuleName        \r\n    }\r\n    \r\n    if ($installedModule) {\r\n        Write-Verbose \"Importing installed $($installedModule.Name) version $($installedModule.Version)\"\r\n        Import-Module $installedModule -Force\r\n    }\r\n    else {\r\n        throw \"$moduleName $requiredVersion is not installed, and could not be downloaded from the PowerShell gallery\"\r\n    }\r\n}\r\n\r\nfunction CheckRequiredDotNetVersionIsInstalled {\r\n    Write-Debug \"Check .NET version pre-requisite\"\r\n\r\n    # Based on https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/how-to-determine-which-versions-are-installed#ps_a\r\n    $dotNet461Installed = Get-ChildItem \"HKLM:SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\" -ErrorAction SilentlyContinue | ? {$_.GetValue('Release') -ge 394254} \r\n    \r\n    if (!$dotNet461Installed) {\r\n        throw \"SQL Change Automation requires .NET Framework 4.6.1 or later.\"\r\n    }\r\n}\r\n\r\nfunction InstallPowerShellGet {\r\n    [CmdletBinding()]\r\n    Param()\r\n    $psget = GetHighestInstalledModule PowerShellGet\r\n    if (!$psget)\r\n    {\r\n        Write-Warning @\"\r\nCannot access the PowerShell Gallery because PowerShellGet is not installed.\r\nTo install PowerShellGet, either upgrade to PowerShell 5 or install the PackageManagement MSI.\r\nSee https://docs.microsoft.com/en-us/powershell/gallery/installing-psget for more details.\r\n\"@\r\n        throw \"PowerShellGet is not available\"\r\n    }\r\n\r\n    if ($psget.Version -lt [Version]'1.6') {\r\n        #Bootstrap the NuGet package provider, which updates NuGet without requiring admin rights\r\n        Write-Debug \"Installing NuGet package provider\"\r\n        Get-PackageProvider NuGet -ForceBootstrap | Out-Null\r\n\r\n        #Use the currently-installed version of PowerShellGet\r\n        Import-PackageProvider PowerShellGet \r\n        \r\n        #Download the version of PowerShellGet that we actually need\r\n        Write-Debug \"Installing PowershellGet\"\r\n        Save-Module -Name PowerShellGet -Path $LocalModules -MinimumVersion 1.6 -Force\r\n    }\r\n\r\n    Write-Debug \"Importing PowershellGet\"\r\n    Import-Module PowerShellGet -MinimumVersion 1.6 -Force\r\n    #Make sure we're actually using the package provider from the imported version of PowerShellGet\r\n    Import-PackageProvider ((Get-Module PowerShellGet).Path) | Out-Null\r\n}\r\n\r\nfunction InstallLocalModule {\r\n    [CmdletBinding()]\r\n    Param(\r\n        [Parameter(Mandatory = $true)]\r\n        [string]$moduleName,\r\n        [Parameter(Mandatory = $false)]\r\n        [Version]$minimumVersion,\r\n        [Parameter(Mandatory = $false)]\r\n        [Version]$maximumVersion\r\n    )\r\n    try {\r\n        InstallPowerShellGet\r\n\r\n        Write-Debug \"Install $moduleName $requiredVersion\"\r\n        Save-Module -Name $moduleName -Path $LocalModules -Force -AcceptLicense -MinimumVersion $minimumVersion -MaximumVersion $maximumVersion -ErrorAction Stop\r\n    }\r\n    catch {\r\n        Write-Warning \"Could not install $moduleName $requiredVersion from any registered PSRepository\"\r\n    }\r\n}\r\n\r\nfunction GetHighestInstalledModule {\r\n    [CmdletBinding()]\r\n    Param(\r\n        [Parameter(Mandatory = $true, Position = 0)]\r\n        [string] $moduleName,\r\n\r\n        [Parameter(Mandatory = $false)]\r\n        [Version]$minimumVersion,\r\n        [Parameter(Mandatory = $false)]\r\n        [Version]$maximumVersion\r\n    )\r\n\r\n    return Get-Module $moduleName -ListAvailable | \r\n           Where {(!$minimumVersion -or ($_.Version -ge $minimumVersion)) -and (!$maximumVersion -or ($_.Version -le $maximumVersion))} | \r\n           Sort -Property Version -Descending |\r\n           Select -First 1\r\n}\r\n\r\nfunction GetHighestInstallableModule {\r\n    [CmdletBinding()]\r\n    Param(\r\n        [Parameter(Mandatory = $true, Position = 0)]\r\n        [string] $moduleName\r\n    )\r\n\r\n    try {\r\n        InstallPowerShellGet\r\n        Find-Module $moduleName -AllVersions -ErrorAction Stop | Sort -Property Version -Descending | Select -First 1    \r\n    }\r\n    catch {\r\n        Write-Warning \"Could not find any suitable versions of $moduleName from any registered PSRepository\"\r\n    }\r\n}\r\n\r\nfunction GetInstalledSqlChangeAutomationVersion {\r\n    $scaModule = (Get-Module $SqlChangeAutomationModuleName)\r\n\r\n    if ($scaModule -ne $null) {\r\n        return $scaModule.Version\r\n    }\r\n\r\n    $dlmaModule = (Get-Module $DlmAutomationModuleName)\r\n\r\n    if ($dlmaModule -ne $null) {\r\n        return $dlmaModule.Version\r\n    }\r\n\r\n    return $null\r\n}\r\n# Version date: 10th July 2018\r\n$ErrorActionPreference = 'Stop'\r\n$VerbosePreference = 'Continue'\r\n\r\n# Set process level FUR environment\r\n$env:REDGATE_FUR_ENVIRONMENT = \"Octopus Step Templates\"\r\n\r\nif ($SpecificModuleVersion -eq '') {\r\n    $SpecificModuleVersion = $null\r\n}\r\n\r\nInstallCorrectSqlChangeAutomation -requiredVersion $SpecificModuleVersion\r\n\r\n# Check if SQL Change Automation is installed.\t\r\n$powershellModule = Get-Module -Name SqlChangeAutomation\t\r\nif ($powershellModule -eq $null) { \t\r\n    throw \"Cannot find SQL Change Automation on your Octopus Tentacle. If SQL Change Automation is installed, try restarting the Tentacle service for it to be detected.\"\t\r\n}\r\n\r\n$currentVersion = $powershellModule.Version\t\r\n$minimumRequiredVersion = [version] '3.0.3'\t\r\nif ($currentVersion -lt $minimumRequiredVersion) { \t\r\n    throw \"This step requires SQL Change Automation version $minimumRequiredVersion or later. The current version is $currentVersion. The latest version can be found at http://www.red-gate.com/sca/productpage\"\t\r\n}\r\n# Check the parameters.\r\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDeploymentResourcesPath)) { throw \"You must enter a value for 'Export path'.\" }\r\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseName)) { throw \"You must enter a value for 'Target database name'.\" }\r\nif ([string]::IsNullOrWhiteSpace($DLMAutomationDatabaseServer)) { throw \"You must enter a value for 'Target SQL Server instance'.\" } \r\nif ([string]::IsNullOrWhiteSpace($DLMAutomationNuGetDbPackageDownloadStepName)) { throw \"You must enter a value for 'Database package step'.\" } \r\n\r\n$queryBatchTimeout = 30\r\nif (![string]::IsNullOrWhiteSpace($DLMAutomationQueryBatchTimeout)) {\r\n    if (![int32]::TryParse($DLMAutomationQueryBatchTimeout , [ref]$queryBatchTimeout )) {\r\n        throw 'The query batch timeout must be a numerical value (in seconds).'\r\n    }\r\n    if ($queryBatchTimeout -lt 0) {\r\n        throw \"The query batch timeout can't be negative.\"\r\n    }\r\n}\r\n\r\n# Check whether database deployment resources export path exists and is a valid directory path \r\nif((Test-Path $DLMAutomationDeploymentResourcesPath) -eq $true) {\r\n    if((Get-Item $DLMAutomationDeploymentResourcesPath) -isnot [System.IO.DirectoryInfo]) {\r\n        throw \"The export path is not a valid folder: $DLMAutomationDeploymentResourcesPath\"\r\n    }\r\n} else {\r\n    throw \"The export path folder doesn't exist, or the current Windows account can't access it: $DLMAutomationDeploymentResourcesPath\"\r\n}\r\n\r\n# Get the NuGet package ID and validate the step name.\r\n$nugetPackageId = $OctopusParameters[\"Octopus.Action[$DLMAutomationNuGetDbPackageDownloadStepName].Package.NuGetPackageId\"]\r\nif ($nugetPackageId -eq $null) { \r\n    throw \"The 'Database package download step' is not a 'Deploy a NuGet package' step: '$DLMAutomationNuGetDbPackageDownloadStepName'\"\r\n}\r\n\r\n# Constructing the unique export path.\r\n$projectId = $OctopusParameters['Octopus.Project.Id']\r\n$releaseNumber = $OctopusParameters['Octopus.Release.Number']\r\n$exportPath = Join-Path (Join-Path (Join-Path $DLMAutomationDeploymentResourcesPath $projectId) $releaseNumber) $nugetPackageId\r\n\r\n# Create and test connection to the database.\r\n$databaseConnection = New-DatabaseConnection -ServerInstance $DLMAutomationDatabaseServer `\r\n                                                -Database $DLMAutomationDatabaseName `\r\n                                                -Username $DLMAutomationDatabaseUsername `\r\n                                                -Password $DLMAutomationDatabasePassword | Test-DatabaseConnection\r\n\r\n$releaseUrl = $OctopusParameters['Octopus.Web.BaseUrl'] + $OctopusParameters['Octopus.Web.DeploymentLink']; \r\n# Import and deploy the release.\r\nImport-DatabaseReleaseArtifact $exportPath | Use-DatabaseReleaseArtifact -DeployTo $databaseConnection -QueryBatchTimeout $queryBatchTimeout -ReleaseUrl $releaseUrl\r\n"
  },
  "SensitiveProperties": {},
  "Parameters": [
    {
      "Name": "DLMAutomationDeploymentResourcesPath",
      "Label": "Export path",
      "HelpText": "The path the database deployment resources were exported to.\n\nThis should be the same path specified in the \"Redgate - Create Database Release\" step, and must be accessible to all tentacles used in database deployment steps.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DLMAutomationNuGetDbPackageDownloadStepName",
      "Label": "Database package step",
      "HelpText": "Select the step in this project which downloads the database package.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "StepName"
      }
    },
    {
      "Name": "DLMAutomationDatabaseServer",
      "Label": "Target SQL Server instance",
      "HelpText": "The fully qualified SQL Server instance name for the target database.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DLMAutomationDatabaseName",
      "Label": "Target database name",
      "HelpText": "The name of the database to deploy changes to. This must be an existing database.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DLMAutomationDatabaseUsername",
      "Label": "Username (optional)",
      "HelpText": "The SQL Server username used to connect to the database. If you leave this field and 'Password' blank, Windows authentication will be used to connect instead, using the account that runs the Tentacle service.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "DLMAutomationDatabasePassword",
      "Label": "Password (optional)",
      "HelpText": "You must enter a password if you entered a username.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Name": "DLMAutomationQueryBatchTimeout",
      "Label": "Query batch timeout (in seconds)",
      "HelpText": "The execution timeout, in seconds, for each batch of queries in the update script. The default value is 30 seconds. A value of zero indicates no execution timeout.",
      "DefaultValue": "30",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Name": "SpecificModuleVersion",
      "Label": "SQL Change Automation version (optional)",
      "HelpText": "If you wish to use a specific version of SQL Change Automation rather than the latest, enter the version number here.",
      "DefaultValue": null,
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "LastModifiedOn": "2018-09-14T14:34Z",
  "LastModifiedBy": "markgould",
  "$Meta": {
    "ExportedAt": "2015-07-15T16:29:37.447Z",
    "OctopusVersion": "2.5.5.318",
    "Type": "ActionTemplate"
  },
  "Category": "redgate"
}